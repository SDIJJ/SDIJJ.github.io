<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>楠の博客</title>
  
  <subtitle>敲敲代码,聊聊人生</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/SDIJJ/sdijj.github.io/"/>
  <updated>2018-10-15T04:52:13.423Z</updated>
  <id>https://github.com/SDIJJ/sdijj.github.io/</id>
  
  <author>
    <name>Arnold</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>二叉搜索树(Binary Seacher  Tree)</title>
    <link href="https://github.com/SDIJJ/sdijj.github.io/2018/10/14/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91(Binary%20Seacher%20%20Tree)/"/>
    <id>https://github.com/SDIJJ/sdijj.github.io/2018/10/14/二叉搜索树(Binary Seacher  Tree)/</id>
    <published>2018-10-14T14:35:37.000Z</published>
    <updated>2018-10-15T04:52:13.423Z</updated>
    
    <content type="html"><![CDATA[<p> <strong>仰望星空,脚踏实地,暗无天日,登峰造极</strong><excerpt in="" index="" |="" 首页摘要=""><br>学习算法思想,修炼编程内功!</excerpt></p><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><h3 id="1-二分查找"><a href="#1-二分查找" class="headerlink" title="1.二分查找"></a>1.二分查找</h3><blockquote><p>一份为二,折半查找</p><p><strong>要求</strong>:待查找数组必须有序</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(T arr[],<span class="keyword">int</span> n,T target)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l=<span class="number">0</span>,r=n<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">        <span class="comment">//int mid=(l+r)/2;  这样写存在bug,可能会溢出</span></span><br><span class="line">        <span class="keyword">int</span> mid=l+(r-l)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(arr[mid]==target)</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        <span class="keyword">if</span>(target&lt;mid)</span><br><span class="line">            r=mid<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            l=mid+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>递归实现二分查找</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">reBinarySearch</span><span class="params">(T arr[], T k, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (l &gt; r)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span> (arr[mid] == k)</span><br><span class="line">        <span class="keyword">return</span> mid;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (k &lt; arr[mid])</span><br><span class="line">        reBinarySearch(arr, k, l, mid - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        reBinarySearch(arr, k, mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-二分搜索树"><a href="#2-二分搜索树" class="headerlink" title="2.二分搜索树"></a>2.二分搜索树</h3><h4 id="2-1二分搜索树的优势"><a href="#2-1二分搜索树的优势" class="headerlink" title="2.1二分搜索树的优势:"></a>2.1二分搜索树的优势:</h4><ul><li><p>高效:</p><p>​    在查找,插入,删除都能以O(lgn)的时间复杂度完成</p></li><li><p>min,max,floor,ceil,rank,select 实现都将很方便</p></li><li><p>在实际应用中,比如要查找一篇文章中某个词出现的次数,用二分搜索树效率将会异常的高</p></li></ul><p><img src="/img/1539167904772.png" alt="1539167904772"></p><h4 id="2-2-二分搜索树的定义"><a href="#2-2-二分搜索树的定义" class="headerlink" title="2.2 二分搜索树的定义:"></a>2.2 二分搜索树的定义:</h4><blockquote><ul><li>在定义中天然的包括了递归结构</li><li>二分搜索树不一定是一颗完全二叉树</li></ul></blockquote><p><img src="/img/1539168446767.png" alt="1539168446767"></p><h4 id="2-3向二叉搜索树中插入新的健值对的实现"><a href="#2-3向二叉搜索树中插入新的健值对的实现" class="headerlink" title="2.3向二叉搜索树中插入新的健值对的实现"></a>2.3向二叉搜索树中插入新的健值对的实现</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Key, <span class="keyword">typename</span> Value&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BST</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">        Key key;</span><br><span class="line">        Value value;</span><br><span class="line">        Node *left;</span><br><span class="line">        Node *right;</span><br><span class="line"></span><br><span class="line">        Node(Key key, Value value) &#123;</span><br><span class="line">            <span class="keyword">this</span>-&gt;key = key;</span><br><span class="line">            <span class="keyword">this</span> - value = value;</span><br><span class="line">            <span class="keyword">this</span>-&gt;right = <span class="keyword">this</span>-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    Node *root;<span class="comment">//存根</span></span><br><span class="line">    <span class="keyword">int</span> count;<span class="comment">//存一共有的节点个数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    BST() &#123;</span><br><span class="line">        root = <span class="literal">NULL</span>;</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~BST()&#123;</span><br><span class="line">        <span class="comment">//TODO</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count==<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(Key key,Value value)</span></span>&#123;</span><br><span class="line">        root = insert(root ,key,value);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">//以node为根的二叉搜索树中插入节点(key,value)</span></span><br><span class="line">    <span class="comment">//放回插入新节点后的二叉搜索树的根</span></span><br><span class="line">    <span class="function">Node* <span class="title">insert</span><span class="params">(Node *node,Key key,Value value)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node-&gt;key==<span class="literal">NULL</span>)&#123;</span><br><span class="line">            count++;</span><br><span class="line"><span class="comment">//            node-&gt;key=key;</span></span><br><span class="line"><span class="comment">//            node-&gt;value=value;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Node(key,value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(node-&gt;key==key)</span><br><span class="line">            node-&gt;value=value;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(node-&gt;key&lt;key)</span><br><span class="line">            node-&gt;left=insert(node-&gt;left,key,value);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            node-&gt;right=insert(node-&gt;right,key,value);</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="2-4二分搜索树实现搜素和是否存在某个值得函数"><a href="#2-4二分搜索树实现搜素和是否存在某个值得函数" class="headerlink" title="2.4二分搜索树实现搜素和是否存在某个值得函数"></a>2.4二分搜索树实现搜素和是否存在某个值得函数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Key, <span class="keyword">typename</span> Value&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BST</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">        Key key;</span><br><span class="line">        Value value;</span><br><span class="line">        Node *left;</span><br><span class="line">        Node *right;</span><br><span class="line"></span><br><span class="line">        Node(Key key, Value value) &#123;</span><br><span class="line">            <span class="keyword">this</span>-&gt;key = key;</span><br><span class="line">            <span class="keyword">this</span> - value = value;</span><br><span class="line">            <span class="keyword">this</span>-&gt;right = <span class="keyword">this</span>-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    Node *root;<span class="comment">//存根</span></span><br><span class="line">    <span class="keyword">int</span> count;<span class="comment">//存一共有的节点个数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    BST() &#123;</span><br><span class="line">        root = <span class="literal">NULL</span>;</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~BST()&#123;</span><br><span class="line">        <span class="comment">//TODO</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count==<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(Key key,Value value)</span></span>&#123;</span><br><span class="line">        root = insert(root ,key,value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查找二叉搜索树是否存在key</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">contain</span><span class="params">(Key key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> contain(root,key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查找key相应节点所对应的Value地址</span></span><br><span class="line">    <span class="function">Value* <span class="title">search</span><span class="params">(Key key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> search(root,key);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">//以node为根的二叉搜索树中插入节点(key,value)</span></span><br><span class="line">    <span class="comment">//放回插入新节点后的二叉搜索树的根</span></span><br><span class="line">    <span class="function">Node* <span class="title">insert</span><span class="params">(Node *node,Key key,Value value)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node-&gt;key==<span class="literal">NULL</span>)&#123;</span><br><span class="line">            count++;</span><br><span class="line"><span class="comment">//            node-&gt;key=key;</span></span><br><span class="line"><span class="comment">//            node-&gt;value=value;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Node(key,value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(node-&gt;key==key)</span><br><span class="line">            node-&gt;value=value;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(node-&gt;key&lt;key)</span><br><span class="line">            node-&gt;left=insert(node-&gt;left,key,value);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            node-&gt;right=insert(node-&gt;right,key,value);</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">contain</span><span class="params">(Node* node ,Key key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node==<span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(node-&gt;key==key)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(key&lt;node-&gt;key)</span><br><span class="line">            <span class="keyword">return</span> contain(node-&gt;key,key);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> contain(node-&gt;right.key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Value* <span class="title">search</span><span class="params">(Node* node,Key key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node==<span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">if</span>(node-&gt;key==key)</span><br><span class="line">            <span class="keyword">return</span> &amp;(node-&gt;value);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(key&lt;node-&gt;key)</span><br><span class="line">            <span class="keyword">return</span> search(node-&gt;left,key);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> search(node-&gt;right,key);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="2-5二分搜索树的前-中-后序遍历-以及二分搜素树的销毁"><a href="#2-5二分搜索树的前-中-后序遍历-以及二分搜素树的销毁" class="headerlink" title="2.5二分搜索树的前,中,后序遍历,以及二分搜素树的销毁"></a>2.5二分搜索树的前,中,后序遍历,以及二分搜素树的销毁</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Key, <span class="keyword">typename</span> Value&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BST</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">        Key key;</span><br><span class="line">        Value value;</span><br><span class="line">        Node *left;</span><br><span class="line">        Node *right;</span><br><span class="line">        Node(Key key, Value value) &#123;</span><br><span class="line">            <span class="keyword">this</span>-&gt;key = key;</span><br><span class="line">            <span class="keyword">this</span> - value = value;</span><br><span class="line">            <span class="keyword">this</span>-&gt;right = <span class="keyword">this</span>-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    Node *root;<span class="comment">//存根</span></span><br><span class="line">    <span class="keyword">int</span> count;<span class="comment">//存一共有的节点个数</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    BST() &#123;</span><br><span class="line">        root = <span class="literal">NULL</span>;</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~BST() &#123;</span><br><span class="line">        destory(root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(Key key, Value value)</span> </span>&#123;</span><br><span class="line">        root = insert(root, key, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查找二叉搜索树是否存在key</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">contain</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> contain(root, key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查找key相应节点所对应的Value地址</span></span><br><span class="line">    <span class="function">Value *<span class="title">search</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> search(root, key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//前序遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">preOreder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        preOreder(root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//中序遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        inOrder(root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//后序遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">postOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        postOrder(root);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="comment">//以node为根的二叉搜索树中插入节点(key,value)</span></span><br><span class="line"><span class="comment">//放回插入新节点后的二叉搜索树的根</span></span><br><span class="line">    <span class="function">Node *<span class="title">insert</span><span class="params">(Node *node, Key key, Value value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node-&gt;key == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            count++;</span><br><span class="line"><span class="comment">//            node-&gt;key=key;</span></span><br><span class="line"><span class="comment">//            node-&gt;value=value;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Node(key, value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node-&gt;key == key)</span><br><span class="line">            node-&gt;value = value;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (node-&gt;key &lt; key)</span><br><span class="line">            node-&gt;left = insert(node-&gt;left, key, value);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            node-&gt;right = insert(node-&gt;right, key, value);</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">contain</span><span class="params">(Node *node, Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (node-&gt;key == key)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (key &lt; node-&gt;key)</span><br><span class="line">            <span class="keyword">return</span> contain(node-&gt;key, key);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> contain(node-&gt;right.key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Value *<span class="title">search</span><span class="params">(Node *node, Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">if</span> (node-&gt;key == key)</span><br><span class="line">            <span class="keyword">return</span> &amp;(node-&gt;value);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (key &lt; node-&gt;key)</span><br><span class="line">            <span class="keyword">return</span> search(node-&gt;left, key);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> search(node-&gt;right, key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(Node *node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; node.key &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">            preOreder(node-&gt;left);</span><br><span class="line">            preOrder(node-&gt;right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(Node *node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            inOrder(node-&gt;left);</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; node-&gt;key &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">            inOrder(node-&gt;right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">postOrder</span><span class="params">(Node *node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            postOrder(node-&gt;left);</span><br><span class="line">            postOrder(node-&gt;right);</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; node-&gt;key &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">destory</span><span class="params">(Node *node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            destory(node-&gt;left);</span><br><span class="line">            destory(node-&gt;right);</span><br><span class="line">            <span class="keyword">delete</span> node;</span><br><span class="line">            count--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="2-6二分搜索树的广度优先遍历-层序遍历"><a href="#2-6二分搜索树的广度优先遍历-层序遍历" class="headerlink" title="2.6二分搜索树的广度优先遍历(层序遍历)"></a>2.6二分搜索树的广度优先遍历(层序遍历)</h3><p><img src="/img/1539226708430.png" alt="1539226708430"></p><blockquote><p>代码实现</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//二叉搜索树的程序遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">levelOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">queue</span>&lt;Node *&gt; q;</span><br><span class="line">        q.push(root);</span><br><span class="line">        <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">            Node node = q.front();</span><br><span class="line">            q.pop();</span><br><span class="line">            count &lt;&lt; node-&gt;key &lt;&lt; <span class="string">" "</span> &lt;&lt; node-&gt;value &lt;&lt; <span class="string">"  "</span>;</span><br><span class="line">            <span class="keyword">if</span> (node.left)</span><br><span class="line">                q.push(node.left);</span><br><span class="line">            <span class="keyword">if</span> (node.right)</span><br><span class="line">                q.push(node.left);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="2-7找出最大值和最小值函数实现"><a href="#2-7找出最大值和最小值函数实现" class="headerlink" title="2.7找出最大值和最小值函数实现"></a>2.7找出最大值和最小值函数实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Key <span class="title">minimum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       assert(count != <span class="number">0</span>);</span><br><span class="line">       Node node = root;</span><br><span class="line">       <span class="keyword">while</span> (node.left != <span class="literal">NULL</span>)</span><br><span class="line">           node = node.left;</span><br><span class="line">       <span class="keyword">return</span> node.key;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function">Key <span class="title">maximum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       assert(count != <span class="number">0</span>);</span><br><span class="line">       Node node = root;</span><br><span class="line">       <span class="keyword">while</span> (node.right != <span class="literal">NULL</span>)</span><br><span class="line">           node = node.right;</span><br><span class="line">       <span class="keyword">return</span> node;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="2-8二分搜素树的删除节点"><a href="#2-8二分搜素树的删除节点" class="headerlink" title="2.8二分搜素树的删除节点"></a>2.8二分搜素树的删除节点</h3></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; &lt;strong&gt;仰望星空,脚踏实地,暗无天日,登峰造极&lt;/strong&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;学习算法思想,修炼编程内功!&lt;/excerpt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="算法学习" scheme="https://github.com/SDIJJ/sdijj.github.io/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="算法" scheme="https://github.com/SDIJJ/sdijj.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>堆排序(heapSort)</title>
    <link href="https://github.com/SDIJJ/sdijj.github.io/2018/10/13/%E5%A0%86%E6%8E%92%E5%BA%8F(heapSort)/"/>
    <id>https://github.com/SDIJJ/sdijj.github.io/2018/10/13/堆排序(heapSort)/</id>
    <published>2018-10-13T15:35:37.000Z</published>
    <updated>2018-10-15T05:29:02.232Z</updated>
    
    <content type="html"><![CDATA[<p> <strong>仰望星空,脚踏实地,暗无天日,登峰造极</strong><excerpt in="" index="" |="" 首页摘要=""><br>学习算法思想,修炼编程内功!</excerpt></p><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><h2 id="堆排序-heapSort"><a href="#堆排序-heapSort" class="headerlink" title="堆排序(heapSort)"></a>堆排序(heapSort)</h2><h3 id="1-堆排序的实现"><a href="#1-堆排序的实现" class="headerlink" title="1.堆排序的实现:"></a>1.堆排序的实现:</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> __shiftDown(T arr[],<span class="keyword">int</span> n,<span class="keyword">int</span> k)&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">2</span>*k+<span class="number">1</span>&lt;n)&#123;</span><br><span class="line">        <span class="keyword">int</span> j=<span class="number">2</span>*k+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(j+<span class="number">1</span>&lt;n&amp;&amp;arr[j+<span class="number">1</span>]&gt;arr[j])</span><br><span class="line">            j+=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(arr[k]&gt;arr[j])</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            swap(arr[j],arr[k]);</span><br><span class="line">            k=j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapSort</span><span class="params">(T arr[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=(n<span class="number">-1</span>)/<span class="number">2</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">    __shiftDown(arr,n,i);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;<span class="number">0</span>;i--)&#123;</span><br><span class="line">        swap(arr[<span class="number">0</span>],arr[i]);</span><br><span class="line">        __shiftDown(arr,i,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-排序算法总结"><a href="#2-排序算法总结" class="headerlink" title="2.排序算法总结:"></a>2.排序算法总结:</h3><blockquote><p>排序苏算法的稳定性:对于相等的元素,在排序后,原来靠前的元素依然靠前.相等元素的相对位置没有发生改变.</p><p>在某次场景会考虑到排序算法的稳定性.比如:学生的姓名是按字典序排列的,根据分数排序后,相同分数的学生还应该按照字典序排列.(插入排序和归并排序是稳定的排序算法)</p><p><img src="/img/1539159816193.png" alt="1539159816193"></p></blockquote><p><img src="/img/1539159633630.png" alt="1539159633630"></p></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; &lt;strong&gt;仰望星空,脚踏实地,暗无天日,登峰造极&lt;/strong&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;学习算法思想,修炼编程内功!&lt;/excerpt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="算法学习" scheme="https://github.com/SDIJJ/sdijj.github.io/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="算法" scheme="https://github.com/SDIJJ/sdijj.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>堆(Heap)</title>
    <link href="https://github.com/SDIJJ/sdijj.github.io/2018/10/13/%E5%A0%86%E7%9A%84%E5%AD%A6%E4%B9%A0(Heap)/"/>
    <id>https://github.com/SDIJJ/sdijj.github.io/2018/10/13/堆的学习(Heap)/</id>
    <published>2018-10-13T14:35:37.000Z</published>
    <updated>2018-10-15T04:52:13.485Z</updated>
    
    <content type="html"><![CDATA[<p> <strong>仰望星空,脚踏实地,暗无天日,登峰造极</strong><excerpt in="" index="" |="" 首页摘要=""><br>学习算法思想,修炼编程内功!</excerpt></p><a id="more"></a><p><the rest="" of="" contents="" |="" 余下全文=""></the></p><h2 id="堆的学习-Heap"><a href="#堆的学习-Heap" class="headerlink" title="堆的学习(Heap)"></a>堆的学习(Heap)</h2><blockquote><p>什么是优先队列:</p><blockquote><p>普通队列:先进先出;后进后出</p><p>优先队列:出队列和入队列和优先级有关(动态)</p></blockquote><p><img src="/img/1539084361286.png" alt="1539084361286"></p></blockquote><h4 id="1二叉堆"><a href="#1二叉堆" class="headerlink" title="1二叉堆"></a>1二叉堆</h4><p><img src="/img/1539085506624.png" alt="1539085506624"></p><h3 id="1-1用数组储存二叉堆"><a href="#1-1用数组储存二叉堆" class="headerlink" title="1.1用数组储存二叉堆"></a>1.1用数组储存二叉堆</h3><p><img src="/img/1539085717026.png" alt="1539085717026"><img src="/img/1539085824560.png" alt="1539085824560">### 1.2定义一个基本的堆</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Item&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Maxheap</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Item *data;</span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Maxheap(<span class="keyword">int</span> capacity)&#123;</span><br><span class="line">        data =<span class="keyword">new</span> Item[capacity+<span class="number">1</span>];</span><br><span class="line">        count=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~Maxheap()&#123;</span><br><span class="line">        <span class="keyword">delete</span>[] data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Maxheap&lt;<span class="keyword">int</span>&gt; maxheap = Maxheap&lt;<span class="keyword">int</span>&gt;(<span class="number">100</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;maxheap.size()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3Shit-Up的实现-向堆中插入元素"><a href="#1-3Shit-Up的实现-向堆中插入元素" class="headerlink" title="1.3Shit Up的实现(向堆中插入元素)"></a>1.3Shit Up的实现(向堆中插入元素)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by JIA on 2018/10/9.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Item&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Maxheap</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Item *data;</span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shiftUp</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (k &gt; <span class="number">1</span> &amp;&amp; data[k / <span class="number">2</span>] &lt; data[k]) &#123;</span><br><span class="line">            swap(data[k / <span class="number">2</span>, data[k]]);</span><br><span class="line"></span><br><span class="line">            k /= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Maxheap(<span class="keyword">int</span> capacity) &#123;</span><br><span class="line">        data = <span class="keyword">new</span> Item[capacity + <span class="number">1</span>];</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~Maxheap() &#123;</span><br><span class="line">        <span class="keyword">delete</span>[] data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(Item item)</span> </span>&#123;</span><br><span class="line">        data[count + <span class="number">1</span>] = item;</span><br><span class="line">        count++;</span><br><span class="line">        shiftUp(count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Maxheap&lt;<span class="keyword">int</span>&gt; maxheap = Maxheap&lt;<span class="keyword">int</span>&gt;(<span class="number">100</span>);</span><br><span class="line">    srand(time(<span class="literal">NULL</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">15</span>; i++) &#123;</span><br><span class="line">        maxheap.insert(rand() % <span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">15</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; maxheap.data[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4ShiftDown和queryMax-的实现-取出堆中最大的元素"><a href="#1-4ShiftDown和queryMax-的实现-取出堆中最大的元素" class="headerlink" title="1.4ShiftDown和queryMax()的实现(取出堆中最大的元素)"></a>1.4ShiftDown和queryMax()的实现(取出堆中最大的元素)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by JIA on 2018/10/9.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Item&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Maxheap</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Item *data;</span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shiftUp</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (k &gt; <span class="number">1</span> &amp;&amp; data[k / <span class="number">2</span>] &lt; data[k]) &#123;</span><br><span class="line">            swap(data[k / <span class="number">2</span>, data[k]]);</span><br><span class="line"></span><br><span class="line">            k /= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shiftDown</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="comment">//        while(data[k]&gt;data[2*k]||data[k]&gt;data[2*k+1])</span></span><br><span class="line">          <span class="keyword">while</span>(<span class="number">2</span>*k&lt;=count)&#123;</span><br><span class="line">              <span class="keyword">int</span> j=<span class="number">2</span>*k;</span><br><span class="line">              <span class="keyword">if</span>(j+<span class="number">1</span>&lt;count&amp;&amp;data[j]&lt;data[j+<span class="number">1</span>])</span><br><span class="line">                  j+=<span class="number">1</span>;</span><br><span class="line">              <span class="keyword">if</span>(data[k]&gt;data[j])</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">              swap(data[k],data[j]);</span><br><span class="line">              k=j;</span><br><span class="line">          &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Maxheap(<span class="keyword">int</span> capacity) &#123;</span><br><span class="line">        data = <span class="keyword">new</span> Item[capacity + <span class="number">1</span>];</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~Maxheap() &#123;</span><br><span class="line">        <span class="keyword">delete</span>[] data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(Item item)</span> </span>&#123;</span><br><span class="line">        data[count + <span class="number">1</span>] = item;</span><br><span class="line">        count++;</span><br><span class="line">        shiftUp(count);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">queryMax</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Item ret=data[<span class="number">1</span>];</span><br><span class="line">        swap(ret ,data[count]);</span><br><span class="line">        count--;</span><br><span class="line">        shiftDown(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Maxheap&lt;<span class="keyword">int</span>&gt; maxheap = Maxheap&lt;<span class="keyword">int</span>&gt;(<span class="number">100</span>);</span><br><span class="line">    srand(time(<span class="literal">NULL</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">15</span>; i++) &#123;</span><br><span class="line">        maxheap.insert(rand() % <span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">15</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; maxheap.data[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-堆排序"><a href="#3-堆排序" class="headerlink" title="3.堆排序"></a>3.堆排序</h2><blockquote><p>借助大顶堆,每次将对顶元素取出;</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HeapSort</span><span class="params">(T arr[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    Maxheap&lt;T&gt; maxheap=<span class="keyword">new</span> Maxheap&lt;T&gt;(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i =n<span class="number">-1</span> ; i&gt;=<span class="number">0</span>  ; i--) &#123;</span><br><span class="line">        arr[i]=maxheap.queryMax();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-5堆排序的优化"><a href="#1-5堆排序的优化" class="headerlink" title="1.5堆排序的优化"></a>1.5堆排序的优化</h3><blockquote><p>直接将待排序的数组初始化成一个大顶堆堆</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Maxheap(Item arr[],<span class="keyword">int</span> n)&#123;</span><br><span class="line">        data=<span class="keyword">new</span> Item[n+<span class="number">1</span>];</span><br><span class="line">        capacity=n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;n ; i++) &#123;</span><br><span class="line">            data[i+<span class="number">1</span>]=arr[i];</span><br><span class="line">            count=n;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=count/<span class="number">2</span>;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">                shiftDown(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="1-6Heapify的算法复杂度"><a href="#1-6Heapify的算法复杂度" class="headerlink" title="1.6Heapify的算法复杂度"></a>1.6Heapify的算法复杂度</h3><p><img src="/img/1539091417707.png" alt="1539091417707">## 2索引堆(Index Heap)</p><blockquote><p>Heapify时只讲数组的索引堆化  </p><p>为什么使用索引堆:</p><p>  Heapify的过程会进行频繁的交换,当元素足够复杂时,交换元素将会异常的耗费资源</p></blockquote><h3 id="2-1-最大索引堆得代码实现"><a href="#2-1-最大索引堆得代码实现" class="headerlink" title="2.1 最大索引堆得代码实现"></a>2.1 最大索引堆得代码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Item&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexMaxheap</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span>* indexes;</span><br><span class="line">    Item *data;</span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line">    <span class="keyword">int</span> cacacity;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shiftUp</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (k &gt; <span class="number">1</span> &amp;&amp; data[indexes[k / <span class="number">2</span>]] &lt; data[indexes[k]]) &#123;</span><br><span class="line">            swap(indexes[k / <span class="number">2</span>], indexes[k]);</span><br><span class="line"></span><br><span class="line">            k /= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shiftDown</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="comment">//        while(data[k]&gt;data[2*k]||data[k]&gt;data[2*k+1])</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="number">2</span>*k&lt;=count)&#123;</span><br><span class="line">            <span class="keyword">int</span> j=<span class="number">2</span>*k;</span><br><span class="line">            <span class="keyword">if</span>(j+<span class="number">1</span>&lt;count&amp;&amp;data[indexes[j]]&lt;data[indexes[j+<span class="number">1</span>]])</span><br><span class="line">                j+=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(data[indexes[k]&gt;data[indexes[j]])</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            swap(indexes[k],indexes[j]);</span><br><span class="line">            k=j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    IndexMaxheap(<span class="keyword">int</span> capacity) &#123;</span><br><span class="line">        data = <span class="keyword">new</span> Item[capacity + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">this</span>-&gt;indexes=<span class="keyword">new</span> <span class="keyword">int</span>[capacity];</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;cacacity=capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~IndexMaxheap() &#123;</span><br><span class="line">        <span class="keyword">delete</span>[] data;</span><br><span class="line">        <span class="keyword">delete</span>[] indexes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> i,Item item)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        data[i+<span class="number">1</span>]=item;</span><br><span class="line">        indexes[count+<span class="number">1</span>]=i;</span><br><span class="line">        count++;</span><br><span class="line">        shiftUp(count);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Item <span class="title">queryMax</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Item ret=data[indexes[<span class="number">1</span>]];</span><br><span class="line">        swap(indexes[<span class="number">1</span>] ,indexes[count]);</span><br><span class="line">        count--;</span><br><span class="line">        shiftDown(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">queryMaxIdex</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ret =indexes[<span class="number">1</span>]<span class="number">-1</span>;</span><br><span class="line">        swap(indexes[<span class="number">1</span>] ,indexes[count]);</span><br><span class="line">        count--;</span><br><span class="line">        shiftDown(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Item <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data[i<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> i,Item item)</span></span>&#123;</span><br><span class="line">        i+=<span class="number">1</span>;</span><br><span class="line">        data[i]=item;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=count;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(indexes[j]==i)&#123;</span><br><span class="line">                shiftDown(indexes[j]);</span><br><span class="line">                shiftUp(indexes[j]);</span><br><span class="line">                <span class="keyword">return</span> ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="2-2-反向查找"><a href="#2-2-反向查找" class="headerlink" title="2.2 反向查找"></a>2.2 反向查找</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; &lt;strong&gt;仰望星空,脚踏实地,暗无天日,登峰造极&lt;/strong&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;学习算法思想,修炼编程内功!&lt;/excerpt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="算法学习" scheme="https://github.com/SDIJJ/sdijj.github.io/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="算法" scheme="https://github.com/SDIJJ/sdijj.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>高级排序算法(n*logN)</title>
    <link href="https://github.com/SDIJJ/sdijj.github.io/2018/10/11/%E9%AB%98%E7%BA%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>https://github.com/SDIJJ/sdijj.github.io/2018/10/11/高级排序算法/</id>
    <published>2018-10-11T14:35:37.000Z</published>
    <updated>2018-10-11T04:34:51.942Z</updated>
    
    <content type="html"><![CDATA[<p> <strong>仰望星空,脚踏实地,暗无天日,登峰造极</strong><excerpt in="" index="" |="" 首页摘要=""><br>学习算法思想,修炼编程内功!</excerpt></p><a id="more"></a><p><the rest="" of="" contents="" |="" 余下全文=""></the></p><h1 id="高级排序算法-n-logN"><a href="#高级排序算法-n-logN" class="headerlink" title="高级排序算法(n*logN)"></a>高级排序算法(n*logN)</h1><h2 id="1-归并排序-Merge-Sort"><a href="#1-归并排序-Merge-Sort" class="headerlink" title="1.归并排序(Merge Sort)"></a>1.归并排序(Merge Sort)</h2><blockquote><p>将待排序的数组无数次分成两部分,最后将剩下的排序(减少了时间复杂度,增加了空间复杂度),归并的过程需要开辟新的数组 </p></blockquote><p><img src="/img/1539061916200.png" alt="1539061916200"></p><p><img src="/img/1539062061025.png" alt="1539062061025"></p><h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><ul><li>注释出代码为接近有序的代码进行优化:如果左面比右面小就不用归并操作</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将arr[l,mid]和[mid+1,r]进行归并</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> __marge(T arr[], <span class="keyword">int</span> l, <span class="keyword">int</span> mid, <span class="keyword">int</span> r) &#123;</span><br><span class="line">    T aux[r - l + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; i++)</span><br><span class="line">        aux[i - l] = arr[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i = l;</span><br><span class="line">    <span class="keyword">int</span> j = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = l; k &lt;= r; k++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; mid) &#123;</span><br><span class="line">            arr[k] = aux[j - l];</span><br><span class="line">            j++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j &gt; r) &#123;</span><br><span class="line">            arr[k] = aux[i - l];</span><br><span class="line">            i++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (aux[i - l] &lt; aux[j - l]) &#123;</span><br><span class="line">            arr[k] = aux[i - l];</span><br><span class="line">            i++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            arr[k] = aux[j - l];</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//对arr[l....r]的范围进行排序</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> __mergeSort(T arr[], <span class="keyword">int</span> l, <span class="keyword">int</span> r) &#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">    __mergeSort(arr, l, mid);</span><br><span class="line">    __mergeSort(arr, mid+<span class="number">1</span>, r);</span><br><span class="line">    <span class="comment">//if (arr[mid] &gt; arr[mid + 1])  //对接近有序的数组进行优化</span></span><br><span class="line">    __marge(arr, l, mid, r);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(T arr[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    __mergeSort(arr, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自底向上实现归并排序-不用进行递归操作"><a href="#自底向上实现归并排序-不用进行递归操作" class="headerlink" title="自底向上实现归并排序(不用进行递归操作)"></a>自底向上实现归并排序(不用进行递归操作)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将arr[l,mid]和[mid+1,r]进行归并</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> __marge(T arr[], <span class="keyword">int</span> l, <span class="keyword">int</span> mid, <span class="keyword">int</span> r) &#123;</span><br><span class="line">    T aux[r - l + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; i++)</span><br><span class="line">        aux[i - l] = arr[i];</span><br><span class="line">    <span class="keyword">int</span> i = l;</span><br><span class="line">    <span class="keyword">int</span> j = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = l; k &lt;= r; k++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; mid) &#123;</span><br><span class="line">            arr[k] = aux[j - l];</span><br><span class="line">            j++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j &gt; r) &#123;</span><br><span class="line">            arr[k] = aux[i - l];</span><br><span class="line">            i++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (aux[i - l] &lt; aux[j - l]) &#123;</span><br><span class="line">            arr[k] = aux[i - l];</span><br><span class="line">            i++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            arr[k] = aux[j - l];</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergerSortBU</span><span class="params">(T arr[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> sz = <span class="number">1</span>; sz &lt;= n; sz += sz) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i + sz &lt; n; i+= sz + sz) &#123;</span><br><span class="line">            __marge(arr, i, i + sz - <span class="number">1</span>, min(i + sz + sz - <span class="number">1</span>, n - <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-快速排序-Quick-Sort"><a href="#2-快速排序-Quick-Sort" class="headerlink" title="2.快速排序(Quick Sort)"></a>2.快速排序(Quick Sort)</h2><blockquote><p>最好理解,实现最容易的排序算法,但是如果数组接近有序时,性能将会异常的差</p><p>使用: swap(arr[l],arr[rand()%(h-l+1)+l]);  随机取一个数可以对代码进行优化</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> __privo(<span class="keyword">int</span> arr[], <span class="keyword">int</span> l, <span class="keyword">int</span> h) &#123;</span><br><span class="line">    <span class="keyword">int</span> p = arr[l];</span><br><span class="line">    <span class="keyword">while</span> (l &lt; h) &#123;</span><br><span class="line">        swap(arr[l],arr[rand()%(h-l+<span class="number">1</span>)+l]);   <span class="comment">//对代码的优化</span></span><br><span class="line">        <span class="keyword">while</span> (l &lt; h &amp;&amp; arr[h] &gt;= p) --h;</span><br><span class="line">        swap(arr[l], arr[h]);</span><br><span class="line">        <span class="keyword">while</span> (l &lt; h &amp;&amp; p &gt; arr[l]) ++l;</span><br><span class="line">        swap(arr[l], arr[h]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> l, <span class="keyword">int</span> h)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt; h)&#123;</span><br><span class="line">        <span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">int</span> p = __privo(arr, l, h);</span><br><span class="line">    quickSort(arr, l, p - <span class="number">1</span>);</span><br><span class="line">    quickSort(arr, p + <span class="number">1</span>, h);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"abc"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">int</span> a[] = &#123;<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">23</span>,<span class="number">6</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    quickSort(a, <span class="number">0</span>, <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"))))"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; &lt;strong&gt;仰望星空,脚踏实地,暗无天日,登峰造极&lt;/strong&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;学习算法思想,修炼编程内功!&lt;/excerpt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="算法学习" scheme="https://github.com/SDIJJ/sdijj.github.io/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="算法" scheme="https://github.com/SDIJJ/sdijj.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>基础排序算法</title>
    <link href="https://github.com/SDIJJ/sdijj.github.io/2018/10/10/%E5%9F%BA%E7%A1%80%E7%9A%84%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>https://github.com/SDIJJ/sdijj.github.io/2018/10/10/基础的排序算法/</id>
    <published>2018-10-10T14:35:37.000Z</published>
    <updated>2018-10-11T04:27:28.668Z</updated>
    
    <content type="html"><![CDATA[<p> <strong>仰望星空,脚踏实地,暗无天日,登峰造极</strong><excerpt in="" index="" |="" 首页摘要=""><br>学习算法思想,修炼编程内功!</excerpt></p><a id="more"></a><p><the rest="" of="" contents="" |="" 余下全文=""></the></p><h1 id="基础排序算法"><a href="#基础排序算法" class="headerlink" title="基础排序算法"></a>基础排序算法</h1><h2 id="1选择排序-Selection-Sort"><a href="#1选择排序-Selection-Sort" class="headerlink" title="1选择排序(Selection Sort)"></a>1选择排序(Selection Sort)</h2><h3 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h3><blockquote><p>基本思想,从0开始每一次找第n小的元素与当前第n位置的元素交换.时间复杂度O(n2) ,无论怎样的数组必须都将两层循环跑完.</p></blockquote><p><img src="/img/1539000224817.png" alt="1539000224817"></p><h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selectionSort</span><span class="params">( <span class="keyword">int</span> arr[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="comment">//寻找[i,n)区间最小值</span></span><br><span class="line">        <span class="keyword">int</span> minIndex=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;n; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[minIndex]&gt;arr[j])&#123;</span><br><span class="line">                minIndex=j;</span><br><span class="line">            &#125;</span><br><span class="line">            swap(arr[minIndex],arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">    selectionSort(a,<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用c-模板进行扩展"><a href="#使用c-模板进行扩展" class="headerlink" title="使用c++模板进行扩展"></a>使用c++模板进行扩展</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Student.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//c++模板,或者泛型</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selectionSort</span><span class="params">( T arr[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="comment">//寻找[i,n)区间最小值</span></span><br><span class="line">        <span class="keyword">int</span> minIndex=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;n; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j]&lt;arr[minIndex])&#123;</span><br><span class="line">                minIndex=j;</span><br><span class="line">            &#125;</span><br><span class="line">            swap(arr[minIndex],arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">    selectionSort(a,<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">float</span> b[]=&#123;<span class="number">1.2</span>,<span class="number">2.4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">2.2</span>&#125;;</span><br><span class="line">    selectionSort(b,<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;b[i]&lt;&lt;<span class="string">"  "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">     <span class="built_in">string</span> c[]=&#123;<span class="string">"d"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"a"</span>,<span class="string">"f"</span>&#125;;</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;c[i]&lt;&lt;<span class="string">"  "</span>;</span><br><span class="line">     &#125;</span><br><span class="line">      <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">      Student d[<span class="number">3</span>]=&#123;&#123;<span class="string">"A"</span>,<span class="number">90</span>&#125;,&#123;<span class="string">"B"</span>,<span class="number">80</span>&#125;,&#123;<span class="string">"C"</span>,<span class="number">85</span>&#125;&#125;;</span><br><span class="line">      selectionSort(d,<span class="number">3</span>);</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;d[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> STUDENT_H_INCLUDED</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STUDENT_H_INCLUDED</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span>&#123;</span></span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">int</span> score;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Student &amp;otherStudent)&#123;</span><br><span class="line">        <span class="keyword">return</span> score &lt; otherStudent.score;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp;os ,<span class="keyword">const</span> Student &amp;student)&#123;</span><br><span class="line">        os&lt;&lt;<span class="string">"Student: "</span>&lt;&lt;student.name&lt;&lt;<span class="string">" "</span>&lt;&lt;student.score&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> os;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// STUDENT_H_INCLUDED</span></span></span><br></pre></td></tr></table></figure><h2 id="2-插入排序-Insertion-Sort"><a href="#2-插入排序-Insertion-Sort" class="headerlink" title="2.插入排序(Insertion Sort)"></a>2.插入排序(Insertion Sort)</h2><blockquote><p>再循环中每次将元素与前面位置元素比较,如果小就交换位置.时间复杂度O(n2).插入排序对接近有序的数组排序性能将会更好</p></blockquote><p><img src="/img/1539003860047.png" alt="1539003860047"></p><h3 id="实现代码-1"><a href="#实现代码-1" class="headerlink" title="实现代码:"></a>实现代码:</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertionSort</span><span class="params">(T arr [],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&gt;<span class="number">0</span>&amp;&amp;arr[j]&lt;arr[j<span class="number">-1</span>];j--)&#123;</span><br><span class="line">            swap(arr[j],arr[j<span class="number">-1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="优化代码"><a href="#优化代码" class="headerlink" title="优化代码:"></a>优化代码:</h3><blockquote><p>每次循环标记元素的值,将每一次交换改成赋值操作,</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertionSortOpt</span><span class="params">(T arr[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        T e = arr[i];</span><br><span class="line">        <span class="keyword">int</span> j;</span><br><span class="line">        <span class="keyword">for</span> ( j = i; j &gt; <span class="number">0</span> &amp;&amp; arr[j - <span class="number">1</span>] &gt; e; j--) &#123;</span><br><span class="line">            arr[j] = arr[j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        arr[j] = e;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; &lt;strong&gt;仰望星空,脚踏实地,暗无天日,登峰造极&lt;/strong&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;学习算法思想,修炼编程内功!&lt;/excerpt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="算法学习" scheme="https://github.com/SDIJJ/sdijj.github.io/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="算法" scheme="https://github.com/SDIJJ/sdijj.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud微服务学习总结</title>
    <link href="https://github.com/SDIJJ/sdijj.github.io/2018/10/04/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>https://github.com/SDIJJ/sdijj.github.io/2018/10/04/SpringCloud微服务学习总结/</id>
    <published>2018-10-03T16:00:00.000Z</published>
    <updated>2018-10-05T13:11:51.250Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 骗的了别人骗不了自己,做什么都要用心!</strong> <excerpt in="" index="" |="" 首页摘要=""><br>对SpringCloud学习做一个总结,供以后应用查看<br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><p>微服务的特点:</p><blockquote><ul><li>一系列微小的服务共同组成</li><li>单独部署,跑在自己的进程里</li><li>每个服务为独立的业务开发</li><li>分布式的管理</li></ul></blockquote><p>传统vs微服务</p><p><img src="/img/1538629111529.png" alt="1538629111529"></p><blockquote><p>业务形态上不适合微服务的场景</p><ul><li>系统中包含很多很多强事务的场景</li><li>业务相对稳定,迭代周期长</li><li>访问压力不大,可用性要求不高</li><li>…</li></ul></blockquote><p><img src="/img/1538628687788.png" alt="1538628687788"></p><p><img src="/img/1538628921984.png" alt="1538628921984"></p><h2 id="1-Eureka服务注册中心"><a href="#1-Eureka服务注册中心" class="headerlink" title="1.Eureka服务注册中心"></a>1.Eureka服务注册中心</h2><h3 id="1-1构建项目"><a href="#1-1构建项目" class="headerlink" title="1.1构建项目"></a>1.1构建项目</h3><blockquote><p>选择eureka Server</p></blockquote><p><img src="/img/1538625976475.png" alt="1538625976475"> </p><h3 id="1-2-启动类上添加"><a href="#1-2-启动类上添加" class="headerlink" title="1.2 启动类上添加"></a>1.2 启动类上添加<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```java</span><br><span class="line"></span><br><span class="line">package com.jia.eureka;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableEurekaServer</span><br><span class="line">public class EurekaApplication &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(EurekaApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></h3><h3 id="1-3-application-yml配置"><a href="#1-3-application-yml配置" class="headerlink" title="1.3 application.yml配置"></a>1.3 application.yml配置</h3><blockquote><ul><li>register-with-eureka: false       是否注册到服务注册中心,因为自己就是服务注册注册中心,所以false</li><li>enable-self-preservation: false      关闭心跳检测保留链接(开发环境为了查看服务状态)</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http:<span class="comment">//localhost:8761/eureka/</span></span><br><span class="line">    register-with-eureka: <span class="keyword">false</span></span><br><span class="line">  server:</span><br><span class="line">    enable-self-preservation: <span class="keyword">false</span></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: eureka</span><br><span class="line">server:</span><br><span class="line">  port: <span class="number">8761</span></span><br></pre></td></tr></table></figure><h3 id="1-4启动效果"><a href="#1-4启动效果" class="headerlink" title="1.4启动效果"></a>1.4启动效果</h3><p><img src="/img/1538626591475.png" alt="1538626591475">### 1.5小结</p><blockquote><p>eureka服务注册中心在生产环境中可以做到高可用,启动多个eureka服务注册中心,彼此相互注册,每个客户端服务再分别注册到这些eureka服务注册中心.即使一个eureka垮掉,整个微服务也可以正常运行.</p><p><img src="/img/1538628284808.png" alt="1538628284808"></p></blockquote><h2 id="2-Eureka客户端的使用"><a href="#2-Eureka客户端的使用" class="headerlink" title="2.Eureka客户端的使用"></a>2.Eureka客户端的使用</h2><h3 id="2-1构建项目"><a href="#2-1构建项目" class="headerlink" title="2.1构建项目"></a>2.1构建项目</h3><blockquote><p>选择Eureka Discovery</p></blockquote><p><img src="/img/1538627464924.png" alt="1538627464924">2.2 启动类上添加@EnableDiscoveryClient注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jia.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(ClientApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-application-yml的配置"><a href="#2-3-application-yml的配置" class="headerlink" title="2.3 application.yml的配置"></a>2.3 application.yml的配置</h3><blockquote><ul><li><p>instance:</p><p>​        hostname: clientName     客户端服务跳转的名字</p></li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http:<span class="comment">//localhost:8761/eureka/</span></span><br><span class="line">#  instance:</span><br><span class="line">#    hostname: clientName</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: client</span><br><span class="line">server:</span><br><span class="line">  port: <span class="number">10001</span></span><br></pre></td></tr></table></figure><h3 id="2-4-启动效果"><a href="#2-4-启动效果" class="headerlink" title="2.4 启动效果"></a>2.4 启动效果</h3><p><img src="/img/1538628237602.png" alt="1538628237602"></p><h3 id="2-5小结"><a href="#2-5小结" class="headerlink" title="2.5小结"></a>2.5小结</h3><blockquote><ul><li>@EnableEurekaServer @EnabeEurekaClient</li><li>心跳检测,健康检查,负载均衡等功能</li><li>Eureka的高可用,生产上建议使用两台</li><li>分布式系统中,服务注册中心是重要的基础部分</li></ul></blockquote><h2 id="3-统一配置中心config"><a href="#3-统一配置中心config" class="headerlink" title="3.统一配置中心config"></a>3.统一配置中心config</h2><h3 id="3-1-为什么需要统一配置中心"><a href="#3-1-为什么需要统一配置中心" class="headerlink" title="3.1.为什么需要统一配置中心"></a>3.1.为什么需要统一配置中心</h3><ul><li>不方便维护</li><li>配置内容安全与权限</li><li>更新配置项目启动</li></ul><h3 id="3-2-统一配置中心总体架构"><a href="#3-2-统一配置中心总体架构" class="headerlink" title="3.2.统一配置中心总体架构"></a>3.2.统一配置中心总体架构</h3><p><img src="/img/1538630591518.png" alt="1538630591518"></p><h3 id="3-3-统一配置中心的Server端"><a href="#3-3-统一配置中心的Server端" class="headerlink" title="3.3.统一配置中心的Server端"></a>3.3.统一配置中心的Server端</h3><blockquote><ul><li>项目构建 </li></ul><p><img src="/img/1538630755571.png" alt="1538630687494"></p><ul><li><p>启动类上添加注解@EnableConfigServer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt;   <span class="keyword">package</span> com.jia.config;</span><br><span class="line">&gt;   </span><br><span class="line">&gt;   <span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line">&gt;   <span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">&gt;   <span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line">&gt;   <span class="keyword">import</span> org.springframework.cloud.config.server.EnableConfigServer;</span><br><span class="line">&gt;   </span><br><span class="line">&gt;   <span class="meta">@SpringBootApplication</span></span><br><span class="line">&gt;   <span class="meta">@EnableDiscoveryClient</span></span><br><span class="line">&gt;   <span class="meta">@EnableConfigServer</span></span><br><span class="line">&gt;   <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigApplication</span> </span>&#123;</span><br><span class="line">&gt;   </span><br><span class="line">&gt;   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">&gt;   SpringApplication.run(ConfigApplication.class, args);</span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li><p>gitee上创建一个仓库用来存放配置文件</p></li><li><blockquote><p>gitee地址:<a href="https://gitee.com/shltj/config-repo" target="_blank" rel="noopener">https://gitee.com/shltj/config-repo</a></p></blockquote><p><img src="/img/1538631315904.png" alt="1538631315904"></p><ul><li><p>application.yml的配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt;       spring:</span><br><span class="line">&gt;         application:</span><br><span class="line">&gt;           name: config</span><br><span class="line">&gt;         cloud:</span><br><span class="line">&gt;           config:</span><br><span class="line">&gt;             server:</span><br><span class="line">&gt;               git:</span><br><span class="line">&gt;                 uri: https:<span class="comment">//gitee.com/shltj/config-repo</span></span><br><span class="line">&gt;                 username: shltj</span><br><span class="line">&gt;                 password: xxxxxxxx</span><br><span class="line">&gt;                 basedir: e:/config</span><br><span class="line">&gt;       eureka:</span><br><span class="line">&gt;         client:</span><br><span class="line">&gt;           service-url:</span><br><span class="line">&gt;             defaultZone: http:<span class="comment">//localhost:8761/eureka/</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul></blockquote><blockquote><pre><code>* 启动效果  ![1538633264680](/img/1538633264680.png)</code></pre></blockquote><h3 id="3-4统一配置中心Client端"><a href="#3-4统一配置中心Client端" class="headerlink" title="3.4统一配置中心Client端"></a>3.4统一配置中心Client端</h3><blockquote><ul><li><p>添加依赖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;   &lt;dependency&gt;</span><br><span class="line">&gt;   &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&gt;   &lt;artifactId&gt;spring-cloud-config-client&lt;/artifactId&gt;</span><br><span class="line">&gt;   &lt;/dependency&gt;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li><p>gitee上新建client-dev.yml</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;   eureka:</span><br><span class="line">&gt;     client:</span><br><span class="line">&gt;       service-url:</span><br><span class="line">&gt;         defaultZone: http:<span class="comment">//localhost:8761/eureka/</span></span><br><span class="line">&gt;   #  instance:</span><br><span class="line">&gt;   #    hostname: clientName</span><br><span class="line">&gt;   spring:</span><br><span class="line">&gt;     application:</span><br><span class="line">&gt;       name: client</span><br><span class="line">&gt;   server:</span><br><span class="line">&gt;     port: <span class="number">10001</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li><p>将applicatiion.yml 修改为bootstrap.yml springboot默认先加载applicatiion.yml </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;     spring:</span><br><span class="line">&gt;       cloud:</span><br><span class="line">&gt;         config:</span><br><span class="line">&gt;           discovery:</span><br><span class="line">&gt;             enabled: <span class="keyword">true</span></span><br><span class="line">&gt;             service-id: config</span><br><span class="line">&gt;           profile: dev</span><br><span class="line">&gt;       application:</span><br><span class="line">&gt;         name: client</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote></blockquote><h2 id="4-SpringCloud-Bus-自动刷新配置"><a href="#4-SpringCloud-Bus-自动刷新配置" class="headerlink" title="4.SpringCloud Bus 自动刷新配置"></a>4.SpringCloud Bus 自动刷新配置</h2><h3 id="4-1自动刷新配置原理"><a href="#4-1自动刷新配置原理" class="headerlink" title="4.1自动刷新配置原理"></a>4.1自动刷新配置原理</h3><p><img src="/img/1538635206179.png" alt="1538635206179">### 4.2在config服务端添加amqp的依赖</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-bus-amqp&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="4-3-在application-yml-中添加rabbitmq的配置并且暴露访问端口-后期可由git服务器的webhook-访问"><a href="#4-3-在application-yml-中添加rabbitmq的配置并且暴露访问端口-后期可由git服务器的webhook-访问" class="headerlink" title="4.3  在application.yml 中添加rabbitmq的配置并且暴露访问端口(后期可由git服务器的webhook 访问)"></a>4.3  在application.yml 中添加rabbitmq的配置并且暴露访问端口(后期可由git服务器的webhook 访问)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  rabbitmq:</span><br><span class="line">    port: <span class="number">5672</span></span><br><span class="line">    host: <span class="number">101.200</span>.44.222</span><br><span class="line">    username: tong</span><br><span class="line">    password: tong</span><br><span class="line">management:</span><br><span class="line">  endpoints:</span><br><span class="line">    web:</span><br><span class="line">      exposure:</span><br><span class="line">        include: <span class="string">"*"</span></span><br></pre></td></tr></table></figure><h3 id="4-4在client服务端添加rabbitmap的依赖"><a href="#4-4在client服务端添加rabbitmap的依赖" class="headerlink" title="4.4在client服务端添加rabbitmap的依赖"></a>4.4在client服务端添加rabbitmap的依赖</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-bus-amqp&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="4-5注意将springboot和springcloud的版本改成BUILD-SNAPSHOT-M3存在bug"><a href="#4-5注意将springboot和springcloud的版本改成BUILD-SNAPSHOT-M3存在bug" class="headerlink" title="4.5注意将springboot和springcloud的版本改成BUILD-SNAPSHOT,M3存在bug."></a>4.5注意将springboot和springcloud的版本改成BUILD-SNAPSHOT,M3存在bug.</h3><blockquote><p><strong>别忘记需要在更新配置的地方添加@RefreshScope注解</strong></p></blockquote><blockquote><p>访问<a href="http://localhost:8080/actuator/bus-refresh(用post请求方式)可以实现动态更新配置,github上的webhook已经支持访问改接口" target="_blank" rel="noopener">http://localhost:8080/actuator/bus-refresh(用post请求方式)可以实现动态更新配置,github上的webhook已经支持访问改接口</a></p></blockquote><h2 id="5-mq的使用"><a href="#5-mq的使用" class="headerlink" title="5.mq的使用"></a>5.mq的使用</h2><h3 id="5-1-mq的应用场景"><a href="#5-1-mq的应用场景" class="headerlink" title="5.1 mq的应用场景"></a>5.1 mq的应用场景</h3><blockquote><ul><li>异步处理</li><li>流量削峰</li><li>日志处理</li><li>应用解耦</li></ul></blockquote><h2 id="6-服务网关Zuul"><a href="#6-服务网关Zuul" class="headerlink" title="6.服务网关Zuul"></a>6.服务网关Zuul</h2><h3 id="6-1服务网关所应具备的要素"><a href="#6-1服务网关所应具备的要素" class="headerlink" title="6.1服务网关所应具备的要素"></a>6.1服务网关所应具备的要素</h3><blockquote><ul><li>稳定性,高可用(7*25小时服务)</li><li>性能,并发性</li><li>安全性</li><li>扩展性</li></ul></blockquote><h3 id="6-2常见的服务网关"><a href="#6-2常见的服务网关" class="headerlink" title="6.2常见的服务网关"></a>6.2常见的服务网关</h3><p><img src="/img/1538648760855.png" alt="1538648760855">### 6.3Zuul的特点</p><blockquote><ul><li><p>路由+过滤器=zuul</p></li><li><p>核心是一些列的过滤器</p><p><img src="/img/1538648953468.png" alt="1538648953468"><img src="/img/1538649013623.png" alt="1538649013623"></p></li></ul></blockquote><h3 id="6-4Zuul的使用"><a href="#6-4Zuul的使用" class="headerlink" title="6.4Zuul的使用"></a>6.4Zuul的使用</h3><blockquote><ul><li><p>项目的构建</p><p><img src="/img/1538649205460.png" alt="1538649205460">*  再启动类上添加@EnableZuulProxy注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt;   <span class="keyword">package</span> com.jia.apigetway;</span><br><span class="line">&gt;   </span><br><span class="line">&gt;   <span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line">&gt;   <span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">&gt;   <span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line">&gt;   <span class="keyword">import</span> org.springframework.cloud.netflix.zuul.EnableZuulProxy;</span><br><span class="line">&gt;   </span><br><span class="line">&gt;   <span class="meta">@SpringBootApplication</span> </span><br><span class="line">&gt;   <span class="meta">@EnableDiscoveryClient</span></span><br><span class="line">&gt;   <span class="meta">@EnableZuulProxy</span></span><br><span class="line">&gt;   <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiGetwayApplication</span> </span>&#123;</span><br><span class="line">&gt;   </span><br><span class="line">&gt;   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">&gt;   SpringApplication.run(ApiGetwayApplication.class, args);</span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt;   </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li>经过服务网关和直接访问服务写法对比(网关+服务+方法)</li></ul><pre><code>&gt; ![1538650336849](/img/1538650336849.png)&gt;&gt; ![1538650399065](/img/1538650399065.png)</code></pre></blockquote><blockquote><ul><li><p>自定义路由bootstrap.yml添加配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;  management:</span><br><span class="line">&gt;    security:</span><br><span class="line">&gt;      enabled: <span class="keyword">false</span></span><br><span class="line">&gt;  zuul:</span><br><span class="line">&gt;    routes:</span><br><span class="line">&gt;      aaaaa:</span><br><span class="line">&gt;        path: /myclient<span class="comment">/**</span></span><br><span class="line"><span class="comment">&gt;        serviceId: client</span></span><br><span class="line"><span class="comment">&gt;</span></span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><hr><p> 简介写法:</p><p> <img src="/img/1538650911129.png" alt="1538650911129"></p></blockquote><blockquote><ul><li><p>排除某些路由的写法:</p><p><img src="/img/1538651042319.png" alt="1538651042319">* Zuul默认服务间不能传递cookie,传递cookId配置方法</p><p><img src="/img/1538651174961.png" alt="1538651174961"></p></li></ul></blockquote><h3 id="6-5Zuul典型的使用场景"><a href="#6-5Zuul典型的使用场景" class="headerlink" title="6.5Zuul典型的使用场景"></a>6.5Zuul典型的使用场景</h3><ul><li>前置过滤器: 限流,鉴权,参数校验调整</li><li>后置过滤器:统计,日志</li></ul><h3 id="6-6Zuul的权限校验"><a href="#6-6Zuul的权限校验" class="headerlink" title="6.6Zuul的权限校验"></a>6.6Zuul的权限校验</h3><blockquote><p>规定请求的参数必须带Token.如果Token为空,校验不通过,实现代码如下:</p><blockquote><p>注意: shouldFilter方法返回值设置为true</p><p>​         filterType()方法中配置参数类型</p><p>​          filterOrder()方法中配置拦截器的优先级</p></blockquote></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jia.apigetway.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.netflix.zuul.ZuulFilter;</span><br><span class="line"><span class="keyword">import</span> com.netflix.zuul.context.RequestContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.cloud.netflix.zuul.filters.support.FilterConstants.PRE_DECORATION_FILTER_ORDER;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.cloud.netflix.zuul.filters.support.FilterConstants.PROXY_KEY;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tocken</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> PROXY_KEY;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> PRE_DECORATION_FILTER_ORDER-<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RequestContext requestContext = RequestContext.getCurrentContext();</span><br><span class="line">        HttpServletRequest request=requestContext.getRequest();</span><br><span class="line">        String token=request.getParameter(<span class="string">"token"</span>);</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isEmpty(token))&#123;</span><br><span class="line">            requestContext.setSendZuulResponse(<span class="keyword">false</span>);</span><br><span class="line">            requestContext.setResponseStatusCode(HttpStatus.SC_UNAUTHORIZED);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-7Zuul的限流"><a href="#6-7Zuul的限流" class="headerlink" title="6.7Zuul的限流"></a>6.7Zuul的限流</h3><blockquote><p>Zuul使用的是Google开发的令牌桶限流,具体如下图:</p><p><img src="/img/1538652781643.png" alt="1538652781643"></p></blockquote><blockquote><p>代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">package</span> com.jia.apigetway.filter;</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="keyword">import</span> com.google.common.util.concurrent.RateLimiter;</span><br><span class="line">&gt; <span class="keyword">import</span> com.netflix.zuul.ZuulFilter;</span><br><span class="line">&gt; <span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="keyword">import</span> <span class="keyword">static</span> org.springframework.cloud.netflix.zuul.filters.support.FilterConstants.PRE_TYPE;</span><br><span class="line">&gt; <span class="keyword">import</span> <span class="keyword">static</span> org.springframework.cloud.netflix.zuul.filters.support.FilterConstants.SERVLET_DETECTION_FILTER_ORDER;</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="meta">@Component</span></span><br><span class="line">&gt; <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RateLimiterFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line">&gt;     <span class="comment">//每秒钟放100令牌</span></span><br><span class="line">&gt;     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> RateLimiter RATE_LIMITER=RateLimiter.create(<span class="number">100</span>);</span><br><span class="line">&gt; </span><br><span class="line">&gt;     <span class="meta">@Override</span></span><br><span class="line">&gt;     <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&gt;         <span class="keyword">return</span> PRE_TYPE;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     <span class="meta">@Override</span></span><br><span class="line">&gt;     <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&gt;         <span class="keyword">return</span> SERVLET_DETECTION_FILTER_ORDER-<span class="number">1</span>;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     <span class="meta">@Override</span></span><br><span class="line">&gt;     <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&gt;         <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     <span class="meta">@Override</span></span><br><span class="line">&gt;     <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&gt;         <span class="keyword">if</span>(!RATE_LIMITER.tryAcquire())&#123;</span><br><span class="line">&gt;            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();   <span class="comment">//通过令牌桶限流,如果拿不到令牌就抛出一个异常,感觉好像有bug</span></span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;         <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h3 id="6-8Zuul的权限校验"><a href="#6-8Zuul的权限校验" class="headerlink" title="6.8Zuul的权限校验"></a>6.8Zuul的权限校验</h3><blockquote><p>通过Zuul的拦截器实现如下鉴权功能</p><p><img src="/img/1538654024968.png" alt="1538654024968"></p><p>在拦截器中具体代码实现如下:</p><p><img src="/img/1538654539209.png" alt="1538654539209"></p></blockquote><h3 id="6-8Zuul的跨域解决方法"><a href="#6-8Zuul的跨域解决方法" class="headerlink" title="6.8Zuul的跨域解决方法"></a>6.8Zuul的跨域解决方法</h3><blockquote><p>基本解决跨域</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jia.apigetway;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.CorsConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.UrlBasedCorsConfigurationSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.filter.CorsFilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 跨域配置</span></span><br><span class="line"><span class="comment"> * C-Cross O-Origin  R-Resource S-Sharing</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CorsConfig</span>  </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CorsFilter <span class="title">corsFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">final</span> UrlBasedCorsConfigurationSource source=<span class="keyword">new</span> UrlBasedCorsConfigurationSource();</span><br><span class="line">        <span class="keyword">final</span> CorsConfiguration config=<span class="keyword">new</span> CorsConfiguration();</span><br><span class="line">        config.setAllowCredentials(<span class="keyword">true</span>);</span><br><span class="line">        config.setAllowedOrigins(Arrays.asList(<span class="string">"*"</span>)); <span class="comment">//http://www.a.com</span></span><br><span class="line">        config.setAllowedHeaders(Arrays.asList(<span class="string">"*"</span>));</span><br><span class="line">        config.setAllowedMethods(Arrays.asList(<span class="string">"*"</span>));</span><br><span class="line">        config.setMaxAge(<span class="number">300l</span>);</span><br><span class="line">        source.registerCorsConfiguration(<span class="string">"/**"</span>,config);</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">new</span> CorsFilter(source)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>通用跨域解决方案</p><p><img src="/img/1538655791286.png" alt="1538655791286"></p></blockquote><h2 id="7-服务容错Hystrix"><a href="#7-服务容错Hystrix" class="headerlink" title="7.服务容错Hystrix"></a>7.服务容错Hystrix</h2><blockquote><p>同步等待会造成资源耗尽</p></blockquote><h3 id="7-1Hystrix的功能"><a href="#7-1Hystrix的功能" class="headerlink" title="7,1Hystrix的功能"></a>7,1Hystrix的功能</h3><blockquote><ul><li>服务降级</li><li>依赖隔离</li><li>服务熔断</li><li>监控(Hystrix Dashboard)</li></ul></blockquote><h3 id="7-2服务降级"><a href="#7-2服务降级" class="headerlink" title="7.2服务降级"></a>7.2服务降级</h3><blockquote><p>优先核心服务,非核心服务不可用或若可用</p><p>通过HystrixCommand注解指定</p><p>fallbackMethod(回退函数)中具体实现降级逻辑</p></blockquote><h3 id="7-3Hystrix的使用"><a href="#7-3Hystrix的使用" class="headerlink" title="7,3Hystrix的使用"></a>7,3Hystrix的使用</h3><blockquote><p>在client服务去访问client2服务的getMessage方法</p><ul><li><p>在client服务端添加Hystrix依赖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;   &lt;dependency&gt;</span><br><span class="line">&gt;   &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&gt;   &lt;artifactId&gt;spring-cloud-starter-hystrix&lt;/artifactId&gt;</span><br><span class="line">&gt;   &lt;/dependency&gt;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li><p>启动类上添加@EnableCircuitBreaker注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt;     <span class="keyword">package</span> com.jia.client;</span><br><span class="line">&gt;     </span><br><span class="line">&gt;     <span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line">&gt;     <span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">&gt;     <span class="keyword">import</span> org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker;</span><br><span class="line">&gt;     <span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line">&gt;     <span class="keyword">import</span> org.springframework.cloud.netflix.hystrix.EnableHystrix;</span><br><span class="line">&gt;     </span><br><span class="line">&gt;     <span class="meta">@SpringBootApplication</span></span><br><span class="line">&gt;     <span class="meta">@EnableDiscoveryClient</span></span><br><span class="line">&gt;     <span class="meta">@EnableCircuitBreaker</span></span><br><span class="line">&gt;     <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientApplication</span> </span>&#123;</span><br><span class="line">&gt;     </span><br><span class="line">&gt;     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">&gt;     SpringApplication.run(ClientApplication.class, args);</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><pre><code>* 定义HystrixController实验服务降级  &gt;在方法上添加  @HystrixCommand(fallbackMethod = &quot;fallback&quot;)注解当方法出现异常或者超时会自动调用fallback();  &gt;  &gt;如果想所有的方法都实现服务降级,可以在Controller上添加@DefaultProperties(defaultFallback=&quot;xxxxx&quot;) xxxxx为自定义服务降级走的方法  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&gt;       <span class="keyword">package</span> com.jia.client.controller;</span><br><span class="line">&gt;       </span><br><span class="line">&gt;       <span class="keyword">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;</span><br><span class="line">&gt;       <span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">&gt;       <span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line">&gt;       <span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line">&gt;       </span><br><span class="line">&gt;       <span class="meta">@RestController</span></span><br><span class="line">&gt;       <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HystrixController</span> </span>&#123;</span><br><span class="line">&gt;       </span><br><span class="line">&gt;            RestTemplate restTemplate=<span class="keyword">new</span> RestTemplate();</span><br><span class="line">&gt;       </span><br><span class="line">&gt;            <span class="meta">@GetMapping</span>(<span class="string">"/get"</span>)</span><br><span class="line">&gt;            <span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"fallback"</span>)</span><br><span class="line">&gt;            <span class="function"><span class="keyword">public</span> String <span class="title">getMsg</span><span class="params">()</span></span>&#123;</span><br><span class="line">&gt;                String msg=restTemplate.getForObject(<span class="string">"http://localhost:10005/getMessage"</span>,String.class);</span><br><span class="line">&gt;                <span class="keyword">try</span> &#123;</span><br><span class="line">&gt;                    Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">&gt;                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">&gt;                    e.printStackTrace();</span><br><span class="line">&gt;                &#125;</span><br><span class="line">&gt;                <span class="keyword">return</span> <span class="string">"from client2 message"</span>+msg;</span><br><span class="line">&gt;            &#125;</span><br><span class="line">&gt;            <span class="function"><span class="keyword">private</span>  String <span class="title">fallback</span><span class="params">()</span></span>&#123;</span><br><span class="line">&gt;                <span class="keyword">return</span> <span class="string">"人太多,挤爆了"</span>;</span><br><span class="line">&gt;            &#125;</span><br><span class="line">&gt;       </span><br><span class="line">&gt;       &#125;</span><br><span class="line">&gt;       </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></code></pre></blockquote><h3 id="7-4Hystrix服务的熔断"><a href="#7-4Hystrix服务的熔断" class="headerlink" title="7,4Hystrix服务的熔断"></a>7,4Hystrix服务的熔断</h3><blockquote><p>断路器实现服务熔断:</p><p><img src="/img/1538702279205.png" alt="1538702279205"></p><p>   访问getMessage方法,当参数为奇数是抛异常,当异常达到一定次数是(60%)启动断路开关</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.client3.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.netflix.hystrix.contrib.javanica.annotation.DefaultProperties;</span><br><span class="line"><span class="keyword">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;</span><br><span class="line"><span class="keyword">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixProperty;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@DefaultProperties</span>(defaultFallback = <span class="string">"defaultFallback"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HystrixController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line"><span class="comment">//    服务的超时配置</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    @HystrixCommand(fallbackMethod = "fallback",commandProperties =&#123;</span></span><br><span class="line"><span class="comment">//            @HystrixProperty(name = "execution.isolation.thread.timeoutInMilliseconds",value="3500")</span></span><br><span class="line"><span class="comment">//    &#125; )</span></span><br><span class="line">    <span class="meta">@HystrixCommand</span>(commandProperties = &#123;</span><br><span class="line">            <span class="meta">@HystrixProperty</span>(name=<span class="string">"circuitBreaker.enabled"</span>,value = <span class="string">"true"</span>),   <span class="comment">//设置熔断</span></span><br><span class="line">            <span class="meta">@HystrixProperty</span>(name=<span class="string">"circuitBreaker.requestVolumeThreshold"</span>,value = <span class="string">"10"</span>),</span><br><span class="line">            <span class="meta">@HystrixProperty</span>(name=<span class="string">"circuitBreaker.sleepWindowInMilliseconds"</span>,value = <span class="string">"10000"</span>),</span><br><span class="line">            <span class="meta">@HystrixProperty</span>(name=<span class="string">"circuitBreaker.errorThresholdPercentage"</span>,value = <span class="string">"60"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/messageT"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">(@RequestParam(<span class="string">"number"</span>)</span> Integer number ) </span>&#123;</span><br><span class="line">        String result=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(number%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">             result = <span class="keyword">this</span>.restTemplate.getForObject(<span class="string">"http://localhost:10006/tong"</span>,String.class);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> a=<span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">             result=<span class="string">"1111"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">fallback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"出故障了!!!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@HystrixCommand</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/messageT1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage1</span><span class="params">()</span> <span class="keyword">throws</span> RuntimeException </span>&#123;</span><br><span class="line">        String result = <span class="keyword">this</span>.restTemplate.getForObject(<span class="string">"http://localhost:10006/tong"</span>, String.class);</span><br><span class="line"></span><br><span class="line">        System.out.println(result);</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">defaultFallback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"默认方法出故障了!!!!!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-5feign和Hystrix的使用"><a href="#7-5feign和Hystrix的使用" class="headerlink" title="7.5feign和Hystrix的使用"></a>7.5feign和Hystrix的使用</h3><blockquote><p>feign的使用(内置ribbon):</p><ul><li><p>添加依赖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;   &lt;dependency&gt;</span><br><span class="line">&gt;       &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&gt;       &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;</span><br><span class="line">&gt;   &lt;/dependency&gt;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li><p>启动类上添加注解@EnableFeignClients</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&gt;   <span class="keyword">package</span> com.jia.client;</span><br><span class="line">&gt;   </span><br><span class="line">&gt;   <span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line">&gt;   <span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">&gt;   <span class="keyword">import</span> org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker;</span><br><span class="line">&gt;   <span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line">&gt;   <span class="keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line">&gt;   </span><br><span class="line">&gt;   <span class="meta">@SpringBootApplication</span></span><br><span class="line">&gt;   <span class="meta">@EnableDiscoveryClient</span></span><br><span class="line">&gt;   <span class="meta">@EnableCircuitBreaker</span></span><br><span class="line">&gt;   <span class="meta">@EnableFeignClients</span></span><br><span class="line">&gt;   <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientApplication</span> </span>&#123;</span><br><span class="line">&gt;   </span><br><span class="line">&gt;   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">&gt;   SpringApplication.run(ClientApplication.class, args);</span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li><p>访问远程服务的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt;     <span class="keyword">package</span> com.jia.client.controller;</span><br><span class="line">&gt;     </span><br><span class="line">&gt;     </span><br><span class="line">&gt;     <span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line">&gt;     <span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line">&gt;     </span><br><span class="line">&gt;     <span class="meta">@FeignClient</span>(<span class="string">"client2"</span>)</span><br><span class="line">&gt;     <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Client2Feign</span> </span>&#123;</span><br><span class="line">&gt;         <span class="meta">@PostMapping</span>(<span class="string">"/client2/getMessage"</span>)</span><br><span class="line">&gt;         <span class="function">String <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;     </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><pre><code>----feign和Hystrix结合使用:&gt; bootstrap.yml中添加配置&gt;&gt; <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;     &gt; feign:</span><br><span class="line">&gt;     &gt;   hystrix:</span><br><span class="line">&gt;     &gt;     enable: <span class="keyword">true</span></span><br><span class="line">&gt;     &gt;</span><br></pre></td></tr></table></figure></code></pre></blockquote><blockquote><pre><code>&gt;&gt;&gt; 如果发生异常执行class中的方法<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&gt;     <span class="keyword">package</span> com.jia.client.controller;</span><br><span class="line">&gt;     </span><br><span class="line">&gt;     </span><br><span class="line">&gt;     <span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line">&gt;     <span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line">&gt;     <span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line">&gt;     </span><br><span class="line">&gt;     <span class="meta">@FeignClient</span>(value = <span class="string">"client2"</span>,fallback = Client2Feign.Client2Fallback.class)</span><br><span class="line">&gt;     <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Client2Feign</span> </span>&#123;</span><br><span class="line">&gt;         <span class="meta">@PostMapping</span>(<span class="string">"/client2/getMessage"</span>)</span><br><span class="line">&gt;         <span class="function">String <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line">&gt;         <span class="meta">@Component</span></span><br><span class="line">&gt;         <span class="class"><span class="keyword">class</span> <span class="title">Client2Fallback</span> <span class="keyword">implements</span> <span class="title">Client2Feign</span></span>&#123;</span><br><span class="line">&gt;             <span class="meta">@Override</span></span><br><span class="line">&gt;             <span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&gt;                 <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&gt;             &#125;</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;     </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></code></pre></blockquote><h3 id="7-6Hystrix-dashboard可视化组件的使用"><a href="#7-6Hystrix-dashboard可视化组件的使用" class="headerlink" title="7.6Hystrix-dashboard可视化组件的使用"></a>7.6Hystrix-dashboard可视化组件的使用</h3><blockquote><ul><li><p>添加依赖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;        &lt;dependency&gt;</span><br><span class="line">&gt;           &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&gt;           &lt;artifactId&gt;spring-cloud-starter-hystrix-dashboard&lt;/artifactId&gt;</span><br><span class="line">&gt;        &lt;/dependency&gt;</span><br><span class="line">&gt;        &lt;dependency&gt;</span><br><span class="line">&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&gt;            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">&gt;         &lt;/dependency&gt;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li><p>启动类上添加注解@EnableHystrixDashboard</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&gt;     <span class="keyword">package</span> com.jia.client;</span><br><span class="line">&gt;     </span><br><span class="line">&gt;     <span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line">&gt;     <span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">&gt;     <span class="keyword">import</span> org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker;</span><br><span class="line">&gt;     <span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line">&gt;     <span class="keyword">import</span> org.springframework.cloud.netflix.hystrix.dashboard.EnableHystrixDashboard;</span><br><span class="line">&gt;     <span class="keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line">&gt;     </span><br><span class="line">&gt;     <span class="meta">@SpringBootApplication</span></span><br><span class="line">&gt;     <span class="meta">@EnableDiscoveryClient</span></span><br><span class="line">&gt;     <span class="meta">@EnableCircuitBreaker</span></span><br><span class="line">&gt;     <span class="meta">@EnableFeignClients</span></span><br><span class="line">&gt;     <span class="meta">@EnableHystrixDashboard</span></span><br><span class="line">&gt;     <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientApplication</span> </span>&#123;</span><br><span class="line">&gt;     </span><br><span class="line">&gt;     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">&gt;     SpringApplication.run(ClientApplication.class, args);</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;     </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><pre><code>* 访问/hystrix路径  ![1538707724714](/img/1538707724714.png)* client服务端添加如下配置:  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;       management:</span><br><span class="line">&gt;         context-path: /</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></code></pre></blockquote><blockquote><pre><code>* 监控视图  ![1538708343150](/img/1538708343150.png)</code></pre></blockquote><h2 id="8-服务的追踪-链路监控Sleuth"><a href="#8-服务的追踪-链路监控Sleuth" class="headerlink" title="8.服务的追踪(链路监控Sleuth)"></a>8.服务的追踪(链路监控Sleuth)</h2><blockquote><ul><li><p>添加依赖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;   &lt;dependency&gt;</span><br><span class="line">&gt;   &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&gt;   &lt;artifactId&gt;spring-cloud-starter-sleuth&lt;/artifactId&gt;</span><br><span class="line">&gt;   &lt;/dependency&gt;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li><p>使用<strong>OpenZIPkin</strong>查看服务的追踪</p><blockquote><ul><li><p>用docker安装软件</p><p>docker pull openzipkin/zipkin</p><p>docker run -d -p 9411:9411 zipkin</p><p>浏览器访问:<a href="http://101.200.44.222:9411/zipkin/" target="_blank" rel="noopener">http://101.200.44.222:9411/zipkin/</a></p><p><img src="/img/1538710627440.png" alt="1538710627440"></p></li></ul></blockquote></li><li><p>client服务添加相应依赖</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;     &lt;dependency&gt;</span><br><span class="line">&gt;        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&gt;        &lt;artifactId&gt;spring-cloud-sleuth-zipkin&lt;/artifactId&gt;</span><br><span class="line">&gt;     &lt;/dependency&gt;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li><p>bootstrap.yml中添加配置</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;       zipkin:</span><br><span class="line">&gt;         base-url: http:<span class="comment">//101.200.44.222:9411</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><pre><code>  * 设置抽样观察百分比为1<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;         sleuth:</span><br><span class="line">&gt;           sampler:</span><br><span class="line">&gt;             percentage: <span class="number">1f</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></code></pre></blockquote><blockquote><ul><li><p>展示效果</p><p>   <img src="/img/1538711526837.png" alt="1538711526837"></p></li></ul></blockquote><h2 id="9-分布式追踪系统"><a href="#9-分布式追踪系统" class="headerlink" title="9.分布式追踪系统"></a>9.分布式追踪系统</h2><h3 id="9-1核心步骤-OpenTracing规范"><a href="#9-1核心步骤-OpenTracing规范" class="headerlink" title="9.1核心步骤(OpenTracing规范)"></a>9.1核心步骤(OpenTracing规范)</h3><p><img src="/img/1538711826394.png" alt="1538711826394"></p><blockquote><ul><li>数据采集</li><li>数据存储</li><li>查询展示</li></ul></blockquote><h2 id="10-使用docker部署项目"><a href="#10-使用docker部署项目" class="headerlink" title="10.使用docker部署项目"></a>10.使用docker部署项目</h2><h3 id="10-1docker部署eureka服务注册中心"><a href="#10-1docker部署eureka服务注册中心" class="headerlink" title="10.1docker部署eureka服务注册中心"></a>10.1docker部署eureka服务注册中心</h3><blockquote><ul><li>Docerfile文件内容</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">FROM</span> hub.c.<span class="number">163</span>.com/library/java:<span class="number">8</span>-alpine</span><br><span class="line">&gt; <span class="keyword">ADD</span> app.jar  app.jar</span><br><span class="line">&gt; EXPOSE 8761</span><br><span class="line">&gt; ENTRYPOINT ["java","-jar","/app.jar"]</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><ul><li><p>构建命令:docker build -t springcloud2/eureka .</p></li><li><p>运行命令:docker run -d -p 8761:8761 springcloud2/eureka</p></li><li><p>网易云上传镜像:<a href="https://www.163yun.com/help/documents/15587826830438400" target="_blank" rel="noopener">https://www.163yun.com/help/documents/15587826830438400</a></p></li><li><p>访问成功:</p><p><img src="/img/1538714796176.png" alt="1538714796176"></p></li></ul></blockquote><h3 id="10-2-rancher的使用"><a href="#10-2-rancher的使用" class="headerlink" title="10.2 rancher的使用"></a>10.2 rancher的使用</h3><blockquote><p>Rancher是一个开源的企业级全栈化容器部署管理平台(为了更方便的管理docker)</p><blockquote><p>安装rancher命令:sudo docker run -d –restart=unless-stopped -p 8080:8080 rancher/server:stable</p></blockquote><p><img src="/img/1538717959699.png" alt="1538717959699"></p><ul><li>需添加一台主机</li></ul></blockquote></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 骗的了别人骗不了自己,做什么都要用心!&lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;对SpringCloud学习做一个总结,供以后应用查看&lt;br&gt;
    
    </summary>
    
      <category term="开源框架" scheme="https://github.com/SDIJJ/sdijj.github.io/categories/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="java" scheme="https://github.com/SDIJJ/sdijj.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>自定义注解+反射实现orm框架的映射与查询功能</title>
    <link href="https://github.com/SDIJJ/sdijj.github.io/2018/10/04/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3+%E5%8F%8D%E5%B0%84%E5%AE%9E%E7%8E%B0orm%E6%A1%86%E6%9E%B6%E7%9A%84%E6%98%A0%E5%B0%84%E4%B8%8E%E6%9F%A5%E8%AF%A2%E5%8A%9F%E8%83%BD/"/>
    <id>https://github.com/SDIJJ/sdijj.github.io/2018/10/04/自定义注解+反射实现orm框架的映射与查询功能/</id>
    <published>2018-10-03T16:00:00.000Z</published>
    <updated>2018-10-04T03:04:17.230Z</updated>
    
    <content type="html"><![CDATA[<p><strong>积极一点,耐心一点,你想要的,时光都会慢慢带到你面前!</strong><excerpt in="" index="" |="" 首页摘要=""><br>对注解和反射的加深学习,对ORM框架的加深理解<br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><blockquote><p><strong>自定义orm框架例如:Mybatis,hibernate的@Table,@Column注解,通过反射解析注解实现对应表的查询功能,对注解加深学习,对orm框架的思想进行理解.</strong><br><em>将定义的注解进行解析取出数据库表的名字,表对应字段的名字,以及字段对应的value进行sql的拼装,最后通过jdbc进行查询.</em><br>具体代码如下:</p></blockquote><h2 id="数据表"><a href="#数据表" class="headerlink" title="数据表"></a>数据表</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Table</span>(<span class="string">"user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Column</span>(<span class="string">"id"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="meta">@Column</span>(<span class="string">"userName"</span>)</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="meta">@Column</span>(<span class="string">"nickName"</span>)</span><br><span class="line">    <span class="keyword">private</span>  String nickName;</span><br><span class="line">    <span class="meta">@Column</span>(<span class="string">"age"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="meta">@Column</span>(<span class="string">"city"</span>)</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    <span class="meta">@Column</span>(<span class="string">"email"</span>)</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="meta">@Column</span>(<span class="string">"mobile"</span>)</span><br><span class="line">    <span class="keyword">private</span> String mobile;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userName = userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNickName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nickName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNickName</span><span class="params">(String nickName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.nickName = nickName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> city;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCity</span><span class="params">(String city)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.city = city;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMobile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mobile;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMobile</span><span class="params">(String mobile)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mobile = mobile;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Table &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(ElementType.FIELD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Column &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对注解的解析和测试类"><a href="#对注解的解析和测试类" class="headerlink" title="对注解的解析和测试类"></a>对注解的解析和测试类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Filter f1 = <span class="keyword">new</span> Filter();</span><br><span class="line">        f1.setAge(<span class="number">10</span>);</span><br><span class="line">        Filter f2 = <span class="keyword">new</span> Filter();</span><br><span class="line">        f2.setNickName(<span class="string">"congcong"</span>);</span><br><span class="line">        Filter f3 = <span class="keyword">new</span> Filter();</span><br><span class="line">        f3.setEmail(<span class="string">"111@qq.com,222@163.com,333@outlook.com"</span>);</span><br><span class="line">        String sql1 = query(f1);</span><br><span class="line">        String sql2 = query(f2);</span><br><span class="line">        String sql3 = query(f3);</span><br><span class="line">        System.out.println(sql1);</span><br><span class="line">        System.out.println(sql2);</span><br><span class="line">        System.out.println(sql3);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">query</span><span class="params">(Filter filter)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="comment">//1.获取Class</span></span><br><span class="line">        Class clazz = filter.getClass();</span><br><span class="line">        <span class="comment">//2.获取Table注解</span></span><br><span class="line">        <span class="keyword">if</span> (!clazz.isAnnotationPresent(Table.class)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Table table = (Table) clazz.getAnnotation(Table.class);</span><br><span class="line">        String tableName = table.value();</span><br><span class="line">        sb.append(<span class="string">"select * from "</span>).append(tableName).append(<span class="string">" where 1=1 "</span>);</span><br><span class="line">        <span class="comment">//3.获取表中的字段</span></span><br><span class="line">        Field[] fields = clazz.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field f : fields) &#123;</span><br><span class="line">            <span class="comment">//4.处理每个字段对应的SQL</span></span><br><span class="line">            <span class="keyword">if</span> (!f.isAnnotationPresent(Column.class)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//4.1获取字段上的注解</span></span><br><span class="line">            Column column = f.getAnnotation(Column.class);</span><br><span class="line">            String columnName = column.value();</span><br><span class="line">            <span class="comment">//4.2获取字段的值</span></span><br><span class="line">            String fieldName = f.getName();</span><br><span class="line">            <span class="comment">//4.3获取字段的get方法</span></span><br><span class="line">            String getMethodName = <span class="string">"get"</span> + fieldName.substring(<span class="number">0</span>, <span class="number">1</span>).toUpperCase()</span><br><span class="line">                    + fieldName.substring(<span class="number">1</span>);</span><br><span class="line">            Object fieldValue = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Method getMethod = clazz.getDeclaredMethod(getMethodName);</span><br><span class="line">                fieldValue = getMethod.invoke(filter);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//4.4拼装SQL</span></span><br><span class="line">            <span class="keyword">if</span> (fieldValue == <span class="keyword">null</span> || (fieldValue <span class="keyword">instanceof</span> Integer &amp;&amp; (Integer) fieldValue == <span class="number">0</span>)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (fieldValue <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">                sb.append(<span class="string">"and "</span>).append(columnName).append(<span class="string">"="</span>);</span><br><span class="line">                <span class="keyword">if</span> (((String) fieldValue).contains(<span class="string">","</span>)) &#123;</span><br><span class="line">                    String[] values = ((String) fieldValue).split(<span class="string">","</span>);</span><br><span class="line">                    sb.append(<span class="string">" in("</span>);</span><br><span class="line">                    <span class="keyword">for</span> (String v : values) &#123;</span><br><span class="line">                        sb.append(<span class="string">"'"</span>).append(v).append(<span class="string">"'"</span>).append(<span class="string">","</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    sb.deleteCharAt(sb.length() - <span class="number">1</span>);</span><br><span class="line">                    sb.append(<span class="string">")"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sb.append(<span class="string">"'"</span>).append(fieldValue)</span><br><span class="line">                        .append(<span class="string">"'"</span>).append(<span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (fieldValue <span class="keyword">instanceof</span> Integer) &#123;</span><br><span class="line">                sb.append(<span class="string">"and "</span>).append(columnName).append(<span class="string">"="</span>).append(fieldValue).append(<span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>通过jdbc可实现表的完整查询功能功能,在此略过</p></blockquote></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;积极一点,耐心一点,你想要的,时光都会慢慢带到你面前!&lt;/strong&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;对注解和反射的加深学习,对ORM框架的加深理解&lt;br&gt;
    
    </summary>
    
      <category term="开源框架" scheme="https://github.com/SDIJJ/sdijj.github.io/categories/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="java" scheme="https://github.com/SDIJJ/sdijj.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>初识Docker</title>
    <link href="https://github.com/SDIJJ/sdijj.github.io/2018/10/03/%E5%88%9D%E8%AF%86Docker/"/>
    <id>https://github.com/SDIJJ/sdijj.github.io/2018/10/03/初识Docker/</id>
    <published>2018-10-03T14:35:37.000Z</published>
    <updated>2018-10-05T13:06:07.224Z</updated>
    
    <content type="html"><![CDATA[<p> <strong>读书,健身,努力工作,关心身体,保持好心情,成为最棒的自己!</strong><excerpt in="" index="" |="" 首页摘要=""><br> docker是一个神奇的开发工具!</excerpt></p><a id="more"></a><p><the rest="" of="" contents="" |="" 余下全文=""></the></p><h2 id="1-什么是docker"><a href="#1-什么是docker" class="headerlink" title="1.什么是docker"></a>1.什么是docker</h2><blockquote><p>docker是一个世界领先的容器化平台.网上对他的定义有很多,说法过于复杂化了.我是通过学习springcloud认识的docker的,感觉它就是一个神器.个人理解的docker就是一个背包,你可以把你需要的东西放在这个背包里,然后这个背包你可以分享给任何人.你也可以从免费的商店里获得别人的背包,无论你咋什么样的环境下都可以正常使用这个背包.</p><p>docker是跨平台的,支持windows,maxos,linux</p></blockquote><h2 id="2-docker思想"><a href="#2-docker思想" class="headerlink" title="2.docker思想"></a>2.docker思想</h2><p><img src="/img/1538544866753.png" alt="1538544866753"></p><h2 id="3-docker解决了哪些问题"><a href="#3-docker解决了哪些问题" class="headerlink" title="3.docker解决了哪些问题"></a>3.docker解决了哪些问题</h2><h3 id="3-1换一个运行环境程序跑不起来"><a href="#3-1换一个运行环境程序跑不起来" class="headerlink" title="3.1换一个运行环境程序跑不起来"></a>3.1换一个运行环境程序跑不起来</h3><blockquote><p>自己本地运行好好的程序放在别人的电脑上就不行了,曾经亲自体会过,非常苦恼.一是苦恼还得在别人的电脑上调bug,更可怕的是时时刻刻担心自己的程序放在第三台电脑上也会down掉了.这种恐惧远胜过修改bug.相信这种问题无论是哪个程序员都或多或少遇到过.docker的出现完美的解决了这个问题,它将你写好的代码,运行环境都放在一个”集装箱”里,给别人的不只是代码,而是一整套的程序所需的运行环境.在你的机器上怎们运行,在别人的电脑或者服务器上就会怎样运行.</p></blockquote><h3 id="3-2完美实现了隔离"><a href="#3-2完美实现了隔离" class="headerlink" title="3.2完美实现了隔离"></a>3.2完美实现了隔离</h3><blockquote><p>docker再启动是为每个容器限定的CPU,硬盘和网络,不会出现一个程序进入了死循环,从而影响到其他程序的事情发生.</p></blockquote><h3 id="3-3弹性伸缩变得简单"><a href="#3-3弹性伸缩变得简单" class="headerlink" title="3.3弹性伸缩变得简单"></a>3.3弹性伸缩变得简单</h3><blockquote><p>就电商来说:双十一几亿人同时在线,按照平时的资源配置肯定吃不消.如果按照双十一的业务量来配置资源平时又是极大的浪费.所以就要弹性的加减服务器,写过java程序的小伙伴们到知道,要想在一台电脑上跑java程序需要安装至少需要安装jre,配置环境,再把代码拷过来运行,中间可能还会出现问题.使用docker扩展服务器将变成按一下按钮秒秒钟添加n台服务器那么容易.</p></blockquote><h2 id="4-走进docker"><a href="#4-走进docker" class="headerlink" title="4.走进docker"></a>4.走进docker</h2><blockquote><p>docker的三个关键字:镜像,仓库,容器</p><p>docker的三个关键单词:Build,Ship,Run</p></blockquote><p><img src="/img/1538546571188.png" alt="1538546571188"></p><blockquote><p>-镜像:</p><p>-容器:</p><p>-仓库:</p><ul><li>官网仓库:hub.docker.com </li><li>网易仓库:c.163.com</li></ul></blockquote><h2 id="5-docker的安装"><a href="#5-docker的安装" class="headerlink" title="5.docker的安装"></a>5.docker的安装</h2><blockquote><p>网上教程很多,懒得再详细总结</p></blockquote><h2 id="6-第一个docker镜像"><a href="#6-第一个docker镜像" class="headerlink" title="6.第一个docker镜像"></a>6.第一个docker镜像</h2><h3 id="6-1docker工作流程"><a href="#6-1docker工作流程" class="headerlink" title="6.1docker工作流程"></a>6.1docker工作流程</h3><p><img src="/img/1538548365242.png" alt="1538548365242"></p><h3 id="6-2常用的命令"><a href="#6-2常用的命令" class="headerlink" title="6.2常用的命令"></a>6.2常用的命令</h3><blockquote><ul><li>docker pull [OPTIONS] NAME[:TAG]  拉去镜像   举例:docker pull hello-world</li><li>docker images [OPTIONS]_[ REPOSITORY[:TAG]] 查看镜像</li><li>docker run hello-world</li><li>docker ps</li><li>docker exec -it [代号] bash   :进入容器(正在运行的)</li><li>which nginx : 查看Nginx的位置</li><li>netstat -na|grep 10001 : 检查端口是否开放</li><li>docker run -d -p 10001:80 nginx   :开放容器的80端口映射到本机的10001端口</li><li>docker run -d -P  nginx :随机开放端口映射过来</li><li>docker build .   : 在当前目录运行构建的Dockerfile 文件</li><li>docker build  -t  Jpress:latest  .   :给镜像起一个名字和版本</li></ul></blockquote><h2 id="7-运行Nginx服务器镜像"><a href="#7-运行Nginx服务器镜像" class="headerlink" title="7.运行Nginx服务器镜像"></a>7.运行Nginx服务器镜像</h2><p><img src="/img/1538548580593.png" alt="1538548580593"></p><h2 id="8-docker的网络"><a href="#8-docker的网络" class="headerlink" title="8.docker的网络"></a>8.docker的网络</h2><p><img src="/img/1538549437822.png" alt="1538549437822"><img src="./img/1538549459787.png" alt="1538549459787"></p><h2 id="9-制作自己的镜像"><a href="#9-制作自己的镜像" class="headerlink" title="9.制作自己的镜像"></a>9.制作自己的镜像</h2><blockquote><ul><li>Dockerfille : 制作镜像</li><li>docker build : 构建镜像</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; &lt;strong&gt;读书,健身,努力工作,关心身体,保持好心情,成为最棒的自己!&lt;/strong&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt; docker是一个神奇的开发工具!&lt;/excerpt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="开发工具" scheme="https://github.com/SDIJJ/sdijj.github.io/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="docker" scheme="https://github.com/SDIJJ/sdijj.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>突破算法第11天-红黑树</title>
    <link href="https://github.com/SDIJJ/sdijj.github.io/2017/10/30/test2/"/>
    <id>https://github.com/SDIJJ/sdijj.github.io/2017/10/30/test2/</id>
    <published>2017-10-30T14:35:37.000Z</published>
    <updated>2018-10-04T03:07:31.302Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 累了选择休息而不是选择放弃!</strong> <excerpt in="" index="" |="" 首页摘要=""><br>红黑树<br><a id="more"></a></excerpt></p><p><the rest="" of="" contents="" |="" 余下全文=""><br><blockquote><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</p></blockquote></the></p><blockquote><p>Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</p><footer><strong>David Levithan</strong><cite>Wide Awake</cite></footer></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static void main</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 累了选择休息而不是选择放弃!&lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;红黑树&lt;br&gt;
    
    </summary>
    
      <category term="开发工具" scheme="https://github.com/SDIJJ/sdijj.github.io/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="开发工具" scheme="https://github.com/SDIJJ/sdijj.github.io/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
</feed>
