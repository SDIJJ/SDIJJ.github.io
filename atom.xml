<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>楠の博客</title>
  
  <subtitle>敲敲代码,聊聊人生</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/SDIJJ/sdijj.github.io/"/>
  <updated>2018-10-04T02:41:32.541Z</updated>
  <id>https://github.com/SDIJJ/sdijj.github.io/</id>
  
  <author>
    <name>Arnold</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>自定义注解+反射实现orm框架的映射与查询功能</title>
    <link href="https://github.com/SDIJJ/sdijj.github.io/2018/10/04/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3+%E5%8F%8D%E5%B0%84%E5%AE%9E%E7%8E%B0orm%E6%A1%86%E6%9E%B6%E7%9A%84%E6%98%A0%E5%B0%84%E4%B8%8E%E6%9F%A5%E8%AF%A2%E5%8A%9F%E8%83%BD/"/>
    <id>https://github.com/SDIJJ/sdijj.github.io/2018/10/04/自定义注解+反射实现orm框架的映射与查询功能/</id>
    <published>2018-10-03T16:00:00.000Z</published>
    <updated>2018-10-04T02:41:32.541Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 自定义注解+反射实现orm框架的映射与查询功能：</strong> <excerpt in="" index="" |="" 首页摘要=""><br>对注解和反射的加深学习,对ORM框架的加深理解<br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><blockquote><p>自定义orm框架例如Mybatis,hibernate的@Table,@Column注解,通过反射解析注解实现对应表的查询功能.</p></blockquote><h2 id="数据表"><a href="#数据表" class="headerlink" title="数据表"></a>数据表</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Table</span>(<span class="string">"user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Column</span>(<span class="string">"id"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="meta">@Column</span>(<span class="string">"userName"</span>)</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="meta">@Column</span>(<span class="string">"nickName"</span>)</span><br><span class="line">    <span class="keyword">private</span>  String nickName;</span><br><span class="line">    <span class="meta">@Column</span>(<span class="string">"age"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="meta">@Column</span>(<span class="string">"city"</span>)</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    <span class="meta">@Column</span>(<span class="string">"email"</span>)</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="meta">@Column</span>(<span class="string">"mobile"</span>)</span><br><span class="line">    <span class="keyword">private</span> String mobile;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userName = userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNickName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nickName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNickName</span><span class="params">(String nickName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.nickName = nickName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> city;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCity</span><span class="params">(String city)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.city = city;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMobile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mobile;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMobile</span><span class="params">(String mobile)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mobile = mobile;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Table &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(ElementType.FIELD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Column &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对注解的解析和测试类"><a href="#对注解的解析和测试类" class="headerlink" title="对注解的解析和测试类"></a>对注解的解析和测试类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Filter f1 = <span class="keyword">new</span> Filter();</span><br><span class="line">        f1.setAge(<span class="number">10</span>);</span><br><span class="line">        Filter f2 = <span class="keyword">new</span> Filter();</span><br><span class="line">        f2.setNickName(<span class="string">"congcong"</span>);</span><br><span class="line">        Filter f3 = <span class="keyword">new</span> Filter();</span><br><span class="line">        f3.setEmail(<span class="string">"111@qq.com,222@163.com,333@outlook.com"</span>);</span><br><span class="line">        String sql1 = query(f1);</span><br><span class="line">        String sql2 = query(f2);</span><br><span class="line">        String sql3 = query(f3);</span><br><span class="line">        System.out.println(sql1);</span><br><span class="line">        System.out.println(sql2);</span><br><span class="line">        System.out.println(sql3);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">query</span><span class="params">(Filter filter)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="comment">//1.获取Class</span></span><br><span class="line">        Class clazz = filter.getClass();</span><br><span class="line">        <span class="comment">//2.获取Table注解</span></span><br><span class="line">        <span class="keyword">if</span> (!clazz.isAnnotationPresent(Table.class)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Table table = (Table) clazz.getAnnotation(Table.class);</span><br><span class="line">        String tableName = table.value();</span><br><span class="line">        sb.append(<span class="string">"select * from "</span>).append(tableName).append(<span class="string">" where 1=1 "</span>);</span><br><span class="line">        <span class="comment">//3.获取表中的字段</span></span><br><span class="line">        Field[] fields = clazz.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field f : fields) &#123;</span><br><span class="line">            <span class="comment">//4.处理每个字段对应的SQL</span></span><br><span class="line">            <span class="keyword">if</span> (!f.isAnnotationPresent(Column.class)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//4.1获取字段上的注解</span></span><br><span class="line">            Column column = f.getAnnotation(Column.class);</span><br><span class="line">            String columnName = column.value();</span><br><span class="line">            <span class="comment">//4.2获取字段的值</span></span><br><span class="line">            String fieldName = f.getName();</span><br><span class="line">            <span class="comment">//4.3获取字段的get方法</span></span><br><span class="line">            String getMethodName = <span class="string">"get"</span> + fieldName.substring(<span class="number">0</span>, <span class="number">1</span>).toUpperCase()</span><br><span class="line">                    + fieldName.substring(<span class="number">1</span>);</span><br><span class="line">            Object fieldValue = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Method getMethod = clazz.getDeclaredMethod(getMethodName);</span><br><span class="line">                fieldValue = getMethod.invoke(filter);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//4.4拼装SQL</span></span><br><span class="line">            <span class="keyword">if</span> (fieldValue == <span class="keyword">null</span> || (fieldValue <span class="keyword">instanceof</span> Integer &amp;&amp; (Integer) fieldValue == <span class="number">0</span>)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (fieldValue <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">                sb.append(<span class="string">"and "</span>).append(columnName).append(<span class="string">"="</span>);</span><br><span class="line">                <span class="keyword">if</span> (((String) fieldValue).contains(<span class="string">","</span>)) &#123;</span><br><span class="line">                    String[] values = ((String) fieldValue).split(<span class="string">","</span>);</span><br><span class="line">                    sb.append(<span class="string">" in("</span>);</span><br><span class="line">                    <span class="keyword">for</span> (String v : values) &#123;</span><br><span class="line">                        sb.append(<span class="string">"'"</span>).append(v).append(<span class="string">"'"</span>).append(<span class="string">","</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    sb.deleteCharAt(sb.length() - <span class="number">1</span>);</span><br><span class="line">                    sb.append(<span class="string">")"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sb.append(<span class="string">"'"</span>).append(fieldValue)</span><br><span class="line">                        .append(<span class="string">"'"</span>).append(<span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (fieldValue <span class="keyword">instanceof</span> Integer) &#123;</span><br><span class="line">                sb.append(<span class="string">"and "</span>).append(columnName).append(<span class="string">"="</span>).append(fieldValue).append(<span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>通过jdbc可实现表的完整查询功能功能,在此略过</p></blockquote></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 自定义注解+反射实现orm框架的映射与查询功能：&lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;对注解和反射的加深学习,对ORM框架的加深理解&lt;br&gt;
    
    </summary>
    
      <category term="开源框架" scheme="https://github.com/SDIJJ/sdijj.github.io/categories/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="java" scheme="https://github.com/SDIJJ/sdijj.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>初识Docker</title>
    <link href="https://github.com/SDIJJ/sdijj.github.io/2018/10/03/%E5%88%9D%E8%AF%86Docker/"/>
    <id>https://github.com/SDIJJ/sdijj.github.io/2018/10/03/初识Docker/</id>
    <published>2018-10-03T14:35:37.000Z</published>
    <updated>2018-10-03T10:43:54.978Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 初识Docker：</strong> <excerpt in="" index="" |="" 首页摘要=""><br>docker是一个神器的开发工具<br><a id="more"></a></excerpt></p><p><the rest="" of="" contents="" |="" 余下全文=""></the></p><h2 id="1-什么是docker"><a href="#1-什么是docker" class="headerlink" title="1.什么是docker"></a>1.什么是docker</h2><blockquote><p>docker是一个世界领先的容器化平台.网上对他的定义有很多,说法过于复杂化了.我是通过学习springcloud认识的docker的,感觉它就是一个神器.个人理解的docker就是一个背包,你可以把你需要的东西放在这个背包里,然后这个背包你可以分享给任何人.你也可以从免费的商店里获得别人的背包,无论你咋什么样的环境下都可以正常使用这个背包.</p><p>docker是跨平台的,支持windows,maxos,linux</p></blockquote><h2 id="2-docker思想"><a href="#2-docker思想" class="headerlink" title="2.docker思想"></a>2.docker思想</h2><p><img src="img/1538544866753.png" alt="1538544866753"></p><h2 id="3-docker解决了哪些问题"><a href="#3-docker解决了哪些问题" class="headerlink" title="3.docker解决了哪些问题"></a>3.docker解决了哪些问题</h2><h3 id="3-1换一个运行环境程序跑不起来"><a href="#3-1换一个运行环境程序跑不起来" class="headerlink" title="3.1换一个运行环境程序跑不起来"></a>3.1换一个运行环境程序跑不起来</h3><blockquote><p>自己本地运行好好的程序放在别人的电脑上就不行了,曾经亲自体会过,非常苦恼.一是苦恼还得在别人的电脑上调bug,更可怕的是时时刻刻担心自己的程序放在第三台电脑上也会down掉了.这种恐惧远胜过修改bug.相信这种问题无论是哪个程序员都或多或少遇到过.docker的出现完美的解决了这个问题,它将你写好的代码,运行环境都放在一个”集装箱”里,给别人的不只是代码,而是一整套的程序所需的运行环境.在你的机器上怎们运行,在别人的电脑或者服务器上就会怎样运行.</p></blockquote><h3 id="3-2完美实现了隔离"><a href="#3-2完美实现了隔离" class="headerlink" title="3.2完美实现了隔离"></a>3.2完美实现了隔离</h3><blockquote><p>docker再启动是为每个容器限定的CPU,硬盘和网络,不会出现一个程序进入了死循环,从而影响到其他程序的事情发生.</p></blockquote><h3 id="3-3弹性伸缩变得简单"><a href="#3-3弹性伸缩变得简单" class="headerlink" title="3.3弹性伸缩变得简单"></a>3.3弹性伸缩变得简单</h3><blockquote><p>就电商来说:双十一几亿人同时在线,按照平时的资源配置肯定吃不消.如果按照双十一的业务量来配置资源平时又是极大的浪费.所以就要弹性的加减服务器,写过java程序的小伙伴们到知道,要想在一台电脑上跑java程序需要安装至少需要安装jre,配置环境,再把代码拷过来运行,中间可能还会出现问题.使用docker扩展服务器将变成按一下按钮秒秒钟添加n台服务器那么容易.</p></blockquote><h2 id="4-走进docker"><a href="#4-走进docker" class="headerlink" title="4.走进docker"></a>4.走进docker</h2><blockquote><p>docker的三个关键字:镜像,仓库,容器</p><p>docker的三个关键单词:Build,Ship,Run</p></blockquote><p><img src="img/1538546571188.png" alt="1538546571188"></p><blockquote><p>-镜像:</p><p>-容器:</p><p>-仓库:</p><ul><li>官网仓库:hub.docker.com </li><li>网易仓库:c.163.com</li></ul></blockquote><h2 id="5-docker的安装"><a href="#5-docker的安装" class="headerlink" title="5.docker的安装"></a>5.docker的安装</h2><blockquote><p>网上教程很多,懒得再详细总结</p></blockquote><h2 id="6-第一个docker镜像"><a href="#6-第一个docker镜像" class="headerlink" title="6.第一个docker镜像"></a>6.第一个docker镜像</h2><h3 id="6-1docker工作流程"><a href="#6-1docker工作流程" class="headerlink" title="6.1docker工作流程"></a>6.1docker工作流程</h3><p><img src="img/1538548365242.png" alt="1538548365242"></p><h3 id="6-2常用的命令"><a href="#6-2常用的命令" class="headerlink" title="6.2常用的命令"></a>6.2常用的命令</h3><blockquote><ul><li>docker pull [OPTIONS] NAME[:TAG]  拉去镜像   举例:docker pull hello-world</li><li>docker images [OPTIONS]_[ REPOSITORY[:TAG]] 查看镜像</li><li>docker run hello-world</li><li>docker ps</li><li>docker exec -it [代号] bash   :进入容器(正在运行的)</li><li>which nginx : 查看Nginx的位置</li><li>netstat -na|grep 10001 : 检查端口是否开放</li><li>docker run -d -p 10001:80 nginx   :开放容器的80端口映射到本机的10001端口</li><li>docker run -d -P  nginx :随机开放端口映射过来</li><li>docker build .   : 在当前目录运行构建的Dockerfile 文件</li><li>docker build  -t  Jpress:latest  .   :给镜像起一个名字和版本</li></ul></blockquote><h2 id="7-运行Nginx服务器镜像"><a href="#7-运行Nginx服务器镜像" class="headerlink" title="7.运行Nginx服务器镜像"></a>7.运行Nginx服务器镜像</h2><p><img src="img/1538548580593.png" alt="1538548580593"></p><h2 id="8-docker的网络"><a href="#8-docker的网络" class="headerlink" title="8.docker的网络"></a>8.docker的网络</h2><p><img src="img/1538549437822.png" alt="1538549437822"><img src="img/1538549459787.png" alt="1538549459787"></p><h2 id="9-制作自己的镜像"><a href="#9-制作自己的镜像" class="headerlink" title="9.制作自己的镜像"></a>9.制作自己的镜像</h2><blockquote><ul><li>Dockerfille : 制作镜像</li><li>docker build : 构建镜像</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 初识Docker：&lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;docker是一个神器的开发工具&lt;br&gt;
    
    </summary>
    
      <category term="开发工具" scheme="https://github.com/SDIJJ/sdijj.github.io/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="docker" scheme="https://github.com/SDIJJ/sdijj.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>初识docker</title>
    <link href="https://github.com/SDIJJ/sdijj.github.io/2018/10/02/test3/"/>
    <id>https://github.com/SDIJJ/sdijj.github.io/2018/10/02/test3/</id>
    <published>2018-10-01T16:00:00.000Z</published>
    <updated>2018-10-04T02:40:45.098Z</updated>
    
    <content type="html"><![CDATA[<p><strong>初识docker: </strong> <excerpt in="" index="" |="" 首页摘要=""></excerpt></p><p>docker</p><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;初识docker: &lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;/excerpt&gt;&lt;/p&gt;
&lt;p&gt;docker&lt;/p&gt;
    
    </summary>
    
      <category term="开源框架" scheme="https://github.com/SDIJJ/sdijj.github.io/categories/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="docker" scheme="https://github.com/SDIJJ/sdijj.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>突破算法第11天-红黑树</title>
    <link href="https://github.com/SDIJJ/sdijj.github.io/2017/10/30/test/"/>
    <id>https://github.com/SDIJJ/sdijj.github.io/2017/10/30/test/</id>
    <published>2017-10-30T14:35:37.000Z</published>
    <updated>2018-10-03T10:39:25.654Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 突破算法第11天-红黑树：</strong> <excerpt in="" index="" |="" 首页摘要=""><br>红黑树<br><a id="more"></a></excerpt></p><p><the rest="" of="" contents="" |="" 余下全文=""></the></p><p>#SpringCloud学习笔记</p><p>##1.介绍</p><p>###1.1使用的参数环境<br><img src="img/1.png" alt="Alt text"></p><p>###1.2微服务的特点<br><img src="./1537497938686.png" alt="Alt text"></p><p>###1.3单体架构的优缺点</p><blockquote><p>优点:</p><blockquote><p>容易测试,<br>容易部署</p></blockquote></blockquote><blockquote><p>缺点:</p><blockquote><p>开发效率低<br>代码维护难<br>部署不够灵活<br>稳定性不高<br>扩展性不够</p></blockquote></blockquote><p>###1.4springCloud简介<br><img src="./1537498785750.png" alt="Alt text"></p><p> ##2.Eureka</p><p> ###2.1Eureka Server</p><p> ###2.2jar包后台运行命令<br><img src="./1537501305317.png" alt="Alt text"></p><p>###2.3乱入<br><img src="./1537506318024.png" alt="Alt text"></p><p>##3.使用feign介绍</p><blockquote><p>feign是一个声明声明式客户端(伪RPC)<br>采用基于注解的接口方式</p></blockquote><p>###3.1使用feign(负载均衡,服务端无感知)</p><blockquote><p>-引入依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-feign&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>-启动类上添加注解:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@EnableFeignClients</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>-编写接口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import org.springframework.cloud.netflix.feign.FeignClient;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"></span><br><span class="line">@FeignClient(&quot;product&quot;)</span><br><span class="line">public interface client &#123;</span><br><span class="line">    @GetMapping(&quot;/msg&quot;)</span><br><span class="line">    String getMessage();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>-方法的使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">public class test &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private client c;</span><br><span class="line">    @GetMapping(&quot;/test&quot;)</span><br><span class="line">    public String test1()&#123;</span><br><span class="line">        System.out.println(this.c.getMessage());</span><br><span class="line">        return &quot;ok&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>##4.统一配置中心</p><p>###4.1为什么需要统一配置中心<br><img src="./1537585553309.png" alt="Alt text"></p><p>###4.2使用步骤:</p><blockquote><p>-使用Cloud Discovery—&gt;Eureka Discovery和Cloud Core–&gt;Conig Server<br>-启动类上添加注解<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;@EnableConfigServer</span><br><span class="line">&gt;```  </span><br><span class="line">&gt;-添加配置文件</span><br><span class="line">&gt;&gt;![Alt text](./1537585889004.png)</span><br><span class="line">&gt;-演示结果</span><br><span class="line">&gt;&gt;![Alt text](./1537585993018.png)</span><br><span class="line">&gt;&gt;![Alt text](./1537586782462.png)</span><br><span class="line">&gt;-其他服务使用统一配置中心步骤</span><br><span class="line">&gt;&gt;-引入依赖</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><dependency><br>  <groupid>org.springframework,cloud</groupid><br>  <artifactid>spring-cloud-config-server</artifactid><br></dependency><br><code>`</code><br>-更改配置:<br><img src="./1537588598008.png" alt="Alt text"></p></blockquote><p>##5.spring-cloud-bus</p><p>###5.1引入依赖<br><img src="./1537589311509.png" alt="Alt text"></p><p>###5.2lamad表达式用法:<br><img src="./1538095467179.png" alt="Alt text"></p><p>##6.服务网关(Zuul)</p><p>###6,1<br><img src="./1538096298269.png" alt="Alt text"></p><p>###6.2<br><img src="./1538096555154.png" alt="Alt text"></p><p>###6.3<br><img src="./1538096577188.png" alt="Alt text"></p><p>###6.4<br><img src="./1538096755804.png" alt="Alt text"></p><p>###6.5Zuul配置跨域访问<br><img src="./1538138149898.png" alt="Alt text"></p><p>##7.Hystrix<br><img src="./1538217115809.png" alt="Alt text"></p><p>###7.1服务降级<br><img src="./1538217871298.png" alt="Alt text"></p><p>###7.2除了调用服务,发生异常时也会降级(默认降级)<br><img src="./1538218170537.png" alt="Alt text"></p><p>###7.3超时注解<br><img src="./1538218520730.png" alt="Alt text"></p><p>###7.4服务的熔断<br><img src="./1538218777950.png" alt="Alt text"><br><img src="./1538218945018.png" alt="Alt text"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 突破算法第11天-红黑树：&lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;红黑树&lt;br&gt;
    
    </summary>
    
      <category term="算法学习" scheme="https://github.com/SDIJJ/sdijj.github.io/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="算法" scheme="https://github.com/SDIJJ/sdijj.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>突破算法第11天-红黑树</title>
    <link href="https://github.com/SDIJJ/sdijj.github.io/2017/10/30/test2/"/>
    <id>https://github.com/SDIJJ/sdijj.github.io/2017/10/30/test2/</id>
    <published>2017-10-30T14:35:37.000Z</published>
    <updated>2018-10-01T00:21:45.354Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 突破算法第11天-红黑树：</strong> <excerpt in="" index="" |="" 首页摘要=""><br>红黑树<br><a id="more"></a></excerpt></p><p><the rest="" of="" contents="" |="" 余下全文=""><br><blockquote><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</p></blockquote></the></p><blockquote><p>Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</p><footer><strong>David Levithan</strong><cite>Wide Awake</cite></footer></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static void main</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 突破算法第11天-红黑树：&lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;红黑树&lt;br&gt;
    
    </summary>
    
      <category term="开发工具" scheme="https://github.com/SDIJJ/sdijj.github.io/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="开发工具" scheme="https://github.com/SDIJJ/sdijj.github.io/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
</feed>
